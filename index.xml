<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Deter Project</title>
    <link>http://deter-project.github.io/</link>
    <description>Recent content on The Deter Project</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Nov 2015 07:54:14 -0800</lastBuildDate>
    <atom:link href="http://deter-project.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Core Quickstart</title>
      <link>http://deter-project.github.io/CoreQuickstart/</link>
      <pubDate>Thu, 12 Nov 2015 07:54:14 -0800</pubDate>
      
      <guid>http://deter-project.github.io/CoreQuickstart/</guid>
      <description>

&lt;p&gt;This page describes basic information about DeterLab and its core functionality.&lt;/p&gt;

&lt;h1 id=&#34;what-is-deterlab:eac272858d0eda260fb9992444171bba&#34;&gt;What is DeterLab?&lt;/h1&gt;

&lt;p&gt;The DeterLab testbed is a security and education-enhanced version of &lt;a href=&#34;https://www.emulab.net/&#34;&gt;Emulab&lt;/a&gt;. Funded by the National Science Foundation and the Department of Homeland Security, DeterLab is hosted by USC/ISI and UC Berkeley.&lt;/p&gt;

&lt;p&gt;DeterLab (like Emulab) offers user accounts with assorted permissions associated with different experiment groups. Each group can have its own pre-configured experimental environments running on Linux, BSD, Windows, or other operating systems. Users running DeterLab experiments have full control of real hardware and networks running preconfigured software packages.&lt;/p&gt;

&lt;h1 id=&#34;how-does-it-work:eac272858d0eda260fb9992444171bba&#34;&gt;How does it work?&lt;/h1&gt;

&lt;p&gt;The software running DeterLab loads operating system images (low level disk copies) onto free nodes in the testbed, and then reconfigures programmable switches to create VLANs with the newly-imaged nodes connected according to the topology specified by the experiment creator.&lt;/p&gt;

&lt;p&gt;After the system is fully imaged and configured, DeterLab executes specified scripts, unpacks tarballs, and/or installs RPM files according to the experiment&amp;rsquo;s configuration. The end result is a live network of real machines, accessible via the Internet.&lt;/p&gt;

&lt;p&gt;Work in DeterLab is based on &lt;em&gt;projects_&amp;rsquo; that include individual &amp;lsquo;_experiments&lt;/em&gt; and is accomplished either via the browser-based web interface (isi.deterlab.net) or via commandline on the DeterLab nodes.&lt;/p&gt;

&lt;p&gt;To access DeterLab, you need to create an account, which provides credentials for accessing both the web interface and nodes.&lt;/p&gt;

&lt;h1 id=&#34;how-do-i-get-a-deterlab-account:eac272858d0eda260fb9992444171bba&#34;&gt;How do I get a DeterLab account?&lt;/h1&gt;

&lt;p&gt;You may obtain a DeterLab account by either starting a new project (if you are a PI or instructor) or joining an existing project (if you are a project member or a student).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you are the project investigator or instructor&lt;/em&gt;, you must create a project and invite your team members or students to join.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you are the member of a team using DeterLab&lt;/em&gt;, your project leader will invite you to join the appropriate DeterLab project.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you are a student&lt;/em&gt;, you may not create a project. Your instructor must create the project and, once approved, will give you information for joining the project.&lt;/p&gt;

&lt;p&gt;See [wiki:GettingStarted Getting Started] for more information.&lt;/p&gt;

&lt;h1 id=&#34;how-do-i-use-deterlab:eac272858d0eda260fb9992444171bba&#34;&gt;How do I use DeterLab?&lt;/h1&gt;

&lt;p&gt;In general, once you have a DeterLab account, you follow these steps. The [wiki:CoreGuide DeterLab Core Guide] will walk you through a basic tutorial of these steps.&lt;/p&gt;

&lt;h2 id=&#34;1-design-the-topology:eac272858d0eda260fb9992444171bba&#34;&gt;1. Design the topology&lt;/h2&gt;

&lt;p&gt;Every experiment in DeterLab is based on a network topology file written in NS format and saved on the users node. The following is a very basic example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# This is a simple ns script. Comments start with #.
set ns [new Simulator]                 
source tb_compat.tcl

set nodeA [$ns node]
set nodeB [$ns node]
set nodeC [$ns node]
set nodeD [$ns node]

set link0 [$ns duplex-link $nodeB $nodeA 30Mb 50ms DropTail]
tb-set-link-loss $link0 0.01

set lan0 [$ns make-lan &amp;quot;$nodeD $nodeC $nodeB &amp;quot; 100Mb 0ms]

# Set the OS on a couple.
tb-set-node-os $nodeA FBSD7-STD
tb-set-node-os $nodeC Ubuntu1004-STD         

$ns rtproto Static

# Go!
$ns run                                 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-create-start-and-swap-in-allocate-resources-for-an-experiment:eac272858d0eda260fb9992444171bba&#34;&gt;2. Create, start and swap in (allocate resources for) an experiment&lt;/h2&gt;

&lt;p&gt;Using your topology file, you start a new experiment via menu options in the DeterLab web interface.&lt;/p&gt;

&lt;p&gt;[[Image(create_experiment_screenshot.png)]]&lt;/p&gt;

&lt;h2 id=&#34;3-generate-traffic-for-your-nodes:eac272858d0eda260fb9992444171bba&#34;&gt;3. Generate traffic for your nodes&lt;/h2&gt;

&lt;p&gt;Now you can experiment and start generating traffic for your nodes. We provide a [wiki:LegoTG flexible framework] to pull together the software you&amp;rsquo;ll need.&lt;/p&gt;

&lt;h2 id=&#34;4-view-results-by-accessing-nodes-modify-the-experiment-as-needed:eac272858d0eda260fb9992444171bba&#34;&gt;4. View results by accessing nodes, modify the experiment as needed.&lt;/h2&gt;

&lt;p&gt;Once your experiment has started, you now can access nodes via SSH and conduct your desired experiments in your new environment.&lt;/p&gt;

&lt;p&gt;You may modify aspects of a running experiment through the &amp;ldquo;Modify experiment&amp;rdquo; page in the web interface or by making changes to the NS file.&lt;/p&gt;

&lt;h2 id=&#34;5-save-your-work-and-swap-out-your-experiment-release-the-resources:eac272858d0eda260fb9992444171bba&#34;&gt;5. Save your work and swap out your experiment (release the resources)&lt;/h2&gt;

&lt;p&gt;When you are ready to stop working on an experiment but know you will want to work on it again, save your files in specific protected directories and swap-out (via web interface or commandline) to release resources back to the testbed. This helps ensure there are enough resources for all DeterLab users.&lt;/p&gt;

&lt;p&gt;This is just a high-level overview. Go to the [wiki:CoreGuide Core Guide] for a basic hands-on example of using DeterLab Core.&lt;/p&gt;

&lt;p&gt;[wiki:Documentation &amp;lt; Documentation] | [wiki:CoreGuide Core Guide &amp;gt;]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Core Guide</title>
      <link>http://deter-project.github.io/CoreGuide/</link>
      <pubDate>Thu, 12 Nov 2015 07:54:14 -0800</pubDate>
      
      <guid>http://deter-project.github.io/CoreGuide/</guid>
      <description>

&lt;p&gt;In this tutorial we begin with a small 3-5 node experiment, so that you will become familiar with NS syntax and the practical aspects of DeterLab operation. Usually, you will want to incorporate another system such as the [wiki:OrchestratorQuickstart MAGI Orchestrator] for more fully fleshed out experiments. But this is a good starting point for those new to DeterLab.&lt;/p&gt;

&lt;p&gt;Note, if you are a student, go to the &lt;a href=&#34;http://education.deterlab.net&#34;&gt;education.deterlab.net&lt;/a&gt; site for classroom-specific instructions.&lt;/p&gt;

&lt;p&gt;[[TOC]]&lt;/p&gt;

&lt;h1 id=&#34;node-use-policy:a35512dd4ffeaf2a562e3f9451f73393&#34;&gt;Node Use Policy&lt;/h1&gt;

&lt;p&gt;Please make sure to read our [wiki:UserGuidelines guidelines for using nodes in DeterLab]. These guidelines help keep DeterLab an effective environment for all users.&lt;/p&gt;

&lt;h1 id=&#34;deterlab-environment:a35512dd4ffeaf2a562e3f9451f73393&#34;&gt;DeterLab Environment&lt;/h1&gt;

&lt;p&gt;Your experiment is made up of one or more machines on the internal DeterLab network, which is behind a firewall.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;users.deterlab.net&lt;/code&gt; (or &lt;code&gt;users&lt;/code&gt; for short) is the &amp;ldquo;control server&amp;rdquo; for DeterLab. From &lt;code&gt;users&lt;/code&gt;, you can contact all your nodes, reboot them, connect to their serial ports, etc. Each user has a home directory on this server and you may SSH into it with your username and password for your DeterLab account.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;myboss.isi.deterlab.net&lt;/code&gt; ( or &lt;code&gt;boss&lt;/code&gt; for short) is the main testbed server that runs DeterLab. Users are not allowed to log directly into it.&lt;/p&gt;

&lt;h1 id=&#34;basic-tutorial:a35512dd4ffeaf2a562e3f9451f73393&#34;&gt;Basic Tutorial&lt;/h1&gt;

&lt;h2 id=&#34;getting-started:a35512dd4ffeaf2a562e3f9451f73393&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Work in DeterLab is organized by &lt;em&gt;experiments_&amp;rsquo; within &amp;lsquo;_projects&lt;/em&gt;. Each project is created and managed by a leader - usually the Principal Investigator (PI) of a research project or the instructor of a class on cybersecurity. The project leader then invites members to join by providing them with the project name and sending them the link to the &amp;lsquo;Join a Project&amp;rsquo; page.&lt;/p&gt;

&lt;p&gt;Before you can take the following tutorial, you need an active account in a project in DeterLab. See [wiki:GettingStarted How to Register] to make sure if you&amp;rsquo;re qualified, and then follow the directions to create a project or ask to join an existing project - if you go through either process for the first time, your account is created as a result.&lt;/p&gt;

&lt;p&gt;If you already have an account, proceed to the next step.&lt;/p&gt;

&lt;h2 id=&#34;step-1-design-the-topology:a35512dd4ffeaf2a562e3f9451f73393&#34;&gt;Step 1: Design the topology&lt;/h2&gt;

&lt;p&gt;Part of DeterLab&amp;rsquo;s power lies in its ability to assume many different topologies; the description of a such a topology is a necessary part
of an experiment.  Before you can start your experiment, you must model the elements of the experiment&amp;rsquo;s network with a topology.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For this basic tutorial, use this [attachment:basic.ns?format=raw NS file] which includes a simple topology and save it to a directory called &lt;em&gt;basicExp&lt;/em&gt; in your local directory on &lt;code&gt;users.deterlab.net&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The rest of this section describes NS format and walks you through the different parts of the sample file.&lt;/p&gt;

&lt;h3 id=&#34;ns-format:a35512dd4ffeaf2a562e3f9451f73393&#34;&gt;NS Format&lt;/h3&gt;

&lt;p&gt;DeterLab uses the &amp;ldquo;NS&amp;rdquo; (&amp;ldquo;Network Simulator&amp;rdquo;) format to describe network topologies. This is substantially the same &lt;a href=&#34;http://www.scriptics.com/software/tcltk/&#34;&gt;Tcl&lt;/a&gt;-based format used by &lt;a href=&#34;http://www.isi.edu/nsnam/ns/&#34;&gt;ns-2&lt;/a&gt;. Since DeterLab offers emulation, rather than simulation, these files are interpreted in a somewhat different manner than ns-2. Therefore, some ns-2 functionality may work differently than you expect, or may not be implemented at all. Please look for warnings of the form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    *** WARNING: Unsupported NS Statement!
        Link type BAZ, using DropTail!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you feel there is useful functionality missing, please [wiki:GettingHelp let us know]. Also, some [wiki:nscommands testbed-specific syntax] has been added, which, with the inclusion of the compatibility module &lt;code&gt;tb_compat.tcl&lt;/code&gt;, will be ignored by the NS simulator. This allows the same NS file to work on both DeterLab and ns-2, most of the time.&lt;/p&gt;

&lt;h3 id=&#34;ns-example:a35512dd4ffeaf2a562e3f9451f73393&#34;&gt;NS Example&lt;/h3&gt;

&lt;p&gt;In our example, we are creating a test network which looks like the following:&lt;/p&gt;

&lt;p&gt;[[Image(abcd.png)]]&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure 1: A is connected to B, and B to C and D with a LAN.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how to describe this topology:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Declare a simulator and include a file that allows you to use the special &lt;code&gt;tb-&lt;/code&gt; commands.&lt;/em&gt;
First off, all NS files start with a simple prologue, declaring a simulator and including a file that allows you to use the special &lt;code&gt;tb-&lt;/code&gt; commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # This is a simple ns script. Comments start with #.
    set ns [new Simulator]
        source tb_compat.tcl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Define the 4 nodes in the topology.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    set nodeA [$ns node]
    set nodeB [$ns node]
    set nodeC [$ns node]
    set nodeD [$ns node]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;nodeA&lt;/code&gt; and so on are the virtual names (&lt;em&gt;vnames&amp;rdquo;) of the nodes in your topology. When your experiment is swapped in (has allocated resources), they will be assigned to physical node names like &amp;ldquo;pc45&lt;/em&gt;, probably different ones each time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE:&amp;ldquo;&amp;rsquo; Avoid vnames that clash with the physical node names in the testbed.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Define the link and the LAN that connect the nodes.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;NS syntax permits you to specify the bandwidth, latency, and queue type. Note that since NS can&amp;rsquo;t impose artificial losses like DeterLab can, we use a separate &lt;code&gt;tb-&lt;/code&gt; command to add loss on a link. For our example, we will define a full speed LAN between B, C, and D, and a shaped link from node A to B.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    set link0 [$ns duplex-link $nodeB $nodeA 30Mb 50ms DropTail]
    tb-set-link-loss $link0 0.01
    set lan0 [$ns make-lan &amp;quot;$nodeD $nodeC $nodeB &amp;quot; 100Mb 0ms]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition to the standard NS syntax above, a number of [wiki:nscommands extensions] are available in DeterLab that allow you to better control your experiment.&lt;/p&gt;

&lt;p&gt;For example, you may specify what Operating System is booted on your nodes. For the versions of FreeBSD, Linux, and Windows we currently support, please refer to the [wiki:OSImages Operating System Images] page.&lt;/p&gt;

&lt;p&gt;Click &lt;a href=&#34;https://www.isi.deterlab.net/showosid_list.php3&#34;&gt;List ImageIDs and OSIDs&lt;/a&gt; in the DeterLab web interface &lt;em&gt;Interaction&lt;/em&gt; pane to see the current list of DeterLab-supplied operating systems. By default, our most recent Linux image is selected.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    tb-set-node-os $nodeA FBSD7-STD
    tb-set-node-os $nodeC Ubuntu1004-STD
    tb-set-node-os $nodeC WINXP-UPDATE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Enable routing.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In a topology like this, you will likely want to communicate between all the nodes, including nodes that aren&amp;rsquo;t directly connected, like &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt;. In order for that to happen, we must enable routing in our experiment, so &lt;code&gt;B&lt;/code&gt; can route packets for the other nodes.&lt;/p&gt;

&lt;p&gt;The typical way to do this is with Static routing. (Other options are detailed in the [wiki:#Routing Routing section below]).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ns rtproto Static
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;End with an epilogue that instructs the simulator to start.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Go!
    $ns run
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-2-create-a-new-experiment:a35512dd4ffeaf2a562e3f9451f73393&#34;&gt;Step 2: Create a new experiment&lt;/h2&gt;

&lt;p&gt;For this tutorial, we will use the web interface to create a new experiment. You could also use the [wiki:DeterLabCommands DeterLab Shell Commands].&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Log into &lt;a href=&#34;https://www.isi.deterlab.net&#34;&gt;DeterLab&lt;/a&gt; with your account credentials (see [wiki:GettingStarted How to Register]).&lt;/li&gt;
&lt;li&gt;Click the &lt;em&gt;Experimentation&amp;rdquo; menu item, then click &amp;ldquo;Begin an Experiment&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Select Project&amp;rdquo; and choose your project. This is also know as your &lt;em&gt;project name&lt;/em&gt; or Project ID (PID). This is used as an argument in many commands. Most people will be a member of just one project, and will not have a choice. If you are a member of multiple projects, be sure to select the correct project from the menu. In this example, we will refer to the project as &amp;ldquo;DeterTest&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Leave the &lt;em&gt;Group&amp;rdquo; field set to &amp;ldquo;Default Group&lt;/em&gt; unless otherwise instructed.&lt;/li&gt;
&lt;li&gt;Enter the &lt;em&gt;Name&amp;rdquo; field with an easily identifiable name for the experiment. The Name should be a single word (no spaces) identifier. For this tutorial, use &amp;ldquo;basic-experiment&lt;/em&gt;. This is also known as your &lt;em&gt;experiment name&lt;/em&gt; or Experiment ID (EID) and is used as an argument in many commands.&lt;/li&gt;
&lt;li&gt;Enter the &lt;em&gt;Description&lt;/em&gt; field with a brief description of the experiment.&lt;/li&gt;
&lt;li&gt;In the &lt;em&gt;Your NS File&lt;/em&gt; field, enter the local path to the basic.ns file you downloaded. This file will be uploaded through your browser when you choose &amp;ldquo;Submit.&amp;rdquo;
 The rest of the settings depend on the goals of your experiment. In this case, you may simply set the &lt;em&gt;Idle Swap&amp;rdquo; field to &amp;ldquo;1 h&amp;rdquo; and leave the rest of the settings for &amp;ldquo;Swapping&amp;rdquo;, &amp;ldquo;Linktest Option&amp;rdquo;, and &amp;ldquo;BatchMode&lt;/em&gt; at their default for now.&lt;/li&gt;
&lt;li&gt;Check the &lt;em&gt;Swap In Immediately&lt;/em&gt; box to start your lab now. If you did not check this box, you would follow the directions for [starting an experiment] to allocate resources later.&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Submit&lt;/em&gt;.&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After submission, DeterLab will begin processing your request. This process can take several minutes, depending on how large your topology is, and what other features (such as delay nodes and bandwidth limits) you are using. While you are waiting, you may watch the swap in process displayed in your web browser.&lt;/p&gt;

&lt;p&gt;Assuming all goes well, you will receive an email message indicating success or failure, and if successful, a listing of the nodes and IP address that were allocated to your experiment.&lt;/p&gt;

&lt;p&gt;For the NS file in this example, you should receive a listing that looks similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Experiment: DeterTest/basic-experiment
State: swapped

Virtual Node Info:
ID              Type         OS              Qualified Name
--------------- ------------ --------------- --------------------
nodeA           pc           FBSD7-STD       nodeA.basic-experiment.DeterTest.isi.deterlab.net
nodeB           pc                           nodeB.basic-experiment.DeterTest.isi.deterlab.net
nodeC           pc           Ubuntu1004-STD  nodeC.basic-experiment.DeterTest.isi.deterlab.net
nodeD           pc                           nodeD.basic-experiment.DeterTest.isi.deterlab.net

Virtual Lan/Link Info:
ID              Member/Proto    IP/Mask         Delay     BW (Kbs)  Loss Rate
--------------- --------------- --------------- --------- --------- ---------
lan0            nodeB:1         10.1.2.4        0.00      100000    0.00000000
                ethernet        255.255.255.0   0.00      100000    0.00000000
lan0            nodeC:0         10.1.2.3        0.00      100000    0.00000000
                ethernet        255.255.255.0   0.00      100000    0.00000000
lan0            nodeD:0         10.1.2.2        0.00      100000    0.00000000
                ethernet        255.255.255.0   0.00      100000    0.00000000
link0           nodeA:0         10.1.1.3        25.00     30000     0.00501256
                ethernet        255.255.255.0   25.00     30000     0.00501256
link0           nodeB:0         10.1.1.2        25.00     30000     0.00501256
                ethernet        255.255.255.0   25.00     30000     0.00501256

Virtual Queue Info:
ID              Member          Q Limit    Type    weight/min_th/max_th/linterm
--------------- --------------- ---------- ------- ----------------------------
lan0            nodeB:1         100 slots  Tail    0/0/0/0
lan0            nodeC:0         100 slots  Tail    0/0/0/0
lan0            nodeD:0         100 slots  Tail    0/0/0/0
link0           nodeA:0         100 slots  Tail    0/0/0/0
link0           nodeB:0         100 slots  Tail    0/0/0/0

Event Groups:
Group Name      Members
--------------- ---------------------------------------------------------------
link0-tracemon  link0-nodeB-tracemon,link0-nodeA-tracemon
__all_lans      lan0,link0
__all_tracemon  link0-nodeB-tracemon,link0-nodeA-tracemon,lan0-nodeD-tracemon,lan0-nodeC-tracemon,lan0-nodeB-tracemon
lan0-tracemon   lan0-nodeB-tracemon,lan0-nodeC-tracemon,lan0-nodeD-tracemon
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a breakdown of the results:
    * A single delay node was allocated and inserted into the link between &lt;em&gt;nodeA&amp;rdquo; and &amp;ldquo;nodeB&lt;/em&gt;. This link is invisible from your perspective, except for the fact that it adds latency, error, or reduced bandwidth. However, the information for the delay links are included so that you can modify the delay parameters after the experiment has been created (Note that you cannot convert a non-shaped link into a shaped link; you can only modify the traffic shaping parameters of a link that is already being shaped). [[BR]]
    * Delays of less than 2ms (per trip) are too small to be accurately modeled at this time, and will be silently ignored. A delay of 0ms can be used to indicate that you do not want added delay; the two interfaces will be &amp;ldquo;directly&amp;rdquo; connected to each other. [[BR]]
    * Each link in the &lt;em&gt;Virtual Lan/Link&amp;rdquo; section has its delay, etc., split between two entries. One is for traffic coming into the link from the node, and the other is for traffic leaving the link to the node. In the case of links, the four entries often get optimized to two entries in a &amp;ldquo;Physical Lan/Link&lt;/em&gt; section. [[BR]]
    * The names in the &lt;em&gt;Qualified Name&amp;rdquo; column refer to the control network interfaces for each of your allocated nodes. These names are added to the DeterLab nameserver map on the fly, and are immediately available for you to use so that you do not have to worry about the actual physical node names that were chosen. In the names listed above, &lt;em&gt;DeterTest&amp;rdquo;&amp;rsquo; is the name of the project that you chose to work in, and &amp;ldquo;&amp;lsquo;basic-experiment&lt;/em&gt; is the name of the experiment that you provided on the &amp;ldquo;Begin an Experiment&lt;/em&gt; page. [[BR]]
    * Please don&amp;rsquo;t use the &lt;em&gt;Qualified Name&lt;/em&gt; from within nodes in your experiment, since it will contact them over the control network, bypassing the link shaping we configured.&lt;/p&gt;

&lt;h3 id=&#34;starting-an-experiment-swap-in:a35512dd4ffeaf2a562e3f9451f73393&#34;&gt;Starting an experiment (Swap-in)&lt;/h3&gt;

&lt;p&gt;If you want to go back to an existing experiment to start it and swap-in (allocate resources):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to your dashboard by clicking the &lt;em&gt;My DeterLab&lt;/em&gt; link in the top menu.&lt;/li&gt;
&lt;li&gt;In the &lt;em&gt;Current Experiments&lt;/em&gt; table, click on the EID (Experiment ID) of the experiment you want to start.&lt;/li&gt;
&lt;li&gt;In the left sidebar, click &lt;em&gt;Swap Experiment In&amp;rdquo;, then click &amp;ldquo;Confirm&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The swap in process will take 5 to 10 minutes; you will receive an email notification when it is complete. While you are waiting, you can watch the swap in process displayed in your web browser.&lt;/p&gt;

&lt;h2 id=&#34;step-3-access-nodes-in-your-lab-environment:a35512dd4ffeaf2a562e3f9451f73393&#34;&gt;Step 3: Access nodes in your lab environment&lt;/h2&gt;

&lt;p&gt;To access your experimental nodes, you&amp;rsquo;ll need to first [wiki:DETERSSH SSH] into &lt;code&gt;users.deterlab.net&lt;/code&gt; using your DeterLab username and password.&lt;/p&gt;

&lt;p&gt;Once you log in to &lt;code&gt;users&lt;/code&gt;, you&amp;rsquo;ll need to SSH again to your actual experimental nodes. Since your nodes addresses may change every time you swap them in, it&amp;rsquo;s best to SSH to the permanent network names of the nodes.&lt;/p&gt;

&lt;p&gt;As we mentioned in the previous step, the Qualified Names are included in the output after the experiment is swapped in. Here is another way to find them after swap-in:&lt;/p&gt;

&lt;p&gt;a. &lt;em&gt;Navigate to the experiment you just created in the web interface&lt;/em&gt;.  This location is usually called the &lt;em&gt;experiment page&lt;/em&gt;.
     * If you just swapped in your experiment, the quickest way to find your node names is to click on the experiment name in the table under &lt;em&gt;Swap Control&lt;/em&gt;.
     * You can also get there by clicking &lt;em&gt;My DeterLab&amp;rdquo; in the top navigation. Your experiment is listed as &amp;ldquo;active&amp;rdquo; in the &amp;ldquo;State&amp;rdquo; column. Click on the experiment&amp;rsquo;s name in the &amp;ldquo;EID&lt;/em&gt; column to display the experiment page..
b. &lt;em&gt;Click on the &lt;em&gt;Details&lt;/em&gt; tab&lt;/em&gt;.
     * Your nodes&amp;rsquo; network names are listed under the heading &lt;em&gt;Qualified Name&lt;/em&gt;. For example, &lt;code&gt;node1.basic-experiment.DeterTest.isi.deterlab.net&lt;/code&gt;.
     * You should familiarize yourself with the information available on this page, but for now we just need to know the long DNS qualified name(s) node(s) you just swapped in.
     * If you are curious, you should also look at the &lt;em&gt;Settings&amp;rdquo; (generic info), &amp;ldquo;Visualization&amp;rdquo;, and &amp;ldquo;NS File&lt;/em&gt; tabs. (The topology mapplet may be disabled for some labs, so these last two may not be visible).
c. &lt;em&gt;SSH from &lt;code&gt;users&lt;/code&gt; to your experimental nodes by running a command with the following syntax&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh node1.ExperimentName.ProjectName.isi.deterlab.net

 * You will not need to re-authenticate.
 * You may need to wait a few more minutes. Once DeterLab is finished setting up the experiment, the nodes still need a minute or two to boot and complete their configuration. If you get a message about &amp;quot;server configuration&amp;quot; when you try to log in, wait a few minutes and try again.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;d. If you need to create new users on your experimental nodes, you may log in as them by running the following from the experimental node:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ssh newuser@node1.basicExp.ProjectName.isi.deterlab.net
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ssh newuser@localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-4-view-results-and-modify-the-experiment:a35512dd4ffeaf2a562e3f9451f73393&#34;&gt;Step 4: View results and modify the experiment&lt;/h2&gt;

&lt;p&gt;You can visualize the experiment by going to your experiment page (from My DeterLab, click the EID link for your experiment) and clicking the &lt;em&gt;Visualization&amp;rdquo; tab. From this page you can also change the NS file by clicking on the &amp;ldquo;NS File&amp;rdquo; tab or modify parameters by clicking &amp;ldquo;Modify Traffic Shaping&lt;/em&gt; in the left sidebar.&lt;/p&gt;

&lt;p&gt;An alternative method is to log into &lt;code&gt;users.isi.deterlab.net&lt;/code&gt; and use the [wiki:DeterLabCommands#delay_config:ChangethelinkshapingcharacteristicsforalinkorLAN delay_config] program. This program requires that you know the symbolic names of the individual links. This information is available on the experiment page.&lt;/p&gt;

&lt;h2 id=&#34;step-5-configure-and-run-your-experiment:a35512dd4ffeaf2a562e3f9451f73393&#34;&gt;Step 5: Configure and run your experiment.&lt;/h2&gt;

&lt;p&gt;Once you have all link modifications to your liking, you now need to install any additional tools you need (tools not included in the OS images you chose in Step 1), configure your tools and coordinate these tools to create events in your experiment.&lt;/p&gt;

&lt;p&gt;For simple experiments, installation, configuration and triggering events can be done by hand or through small scripts. To accomplish this, log into your machines (see Step 3), perform the OS-specific steps needed to install and configure your tools, and run these tools by hand or through scripts, such as shell scripts or remote scripts such as Fabric-based scripts (&lt;a href=&#34;http://www.fabfile.org&#34;&gt;http://www.fabfile.org&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;For more complicated experiments, you may need more automated ways to install and configure tools as well as coordinate events within your experiment. For fine-grained control over events and event triggers, see the [wiki:OrchestratorQuickstart MAGI Orchestrator].&lt;/p&gt;

&lt;p&gt;A large part of many experiments is traffic generation: the generation and modulation of packets on experiment links. Tools for such generation include the [wiki:OrchestratorQuickstart MAGI Orchestrator] and [wiki:LegoTG LegoTG], as well as [wiki:LegacyTools#LegitimateTrafficGenerators many other possibilities].&lt;/p&gt;

&lt;h2 id=&#34;step-6-save-your-work-and-swap-out-release-resources:a35512dd4ffeaf2a562e3f9451f73393&#34;&gt;Step 6: Save your work and swap-out (release resources)&lt;/h2&gt;

&lt;p&gt;When you are done working with your nodes, it is best practice to save your work and swap out the experiment so that other users have access to the physical machines.&lt;/p&gt;

&lt;h3 id=&#34;saving-and-securing-your-files-on-deterlab:a35512dd4ffeaf2a562e3f9451f73393&#34;&gt;Saving and securing your files on DeterLab&lt;/h3&gt;

&lt;p&gt;Every user on DeterLab has a home directory on &lt;code&gt;users.deterlab.net&lt;/code&gt; which is mounted via NFS to experimental nodes. This means that anything you place in your home directory on one experimental node (or the &lt;code&gt;users&lt;/code&gt; machine) is visible in your home directory on your other experimental nodes. Your home directory is private and will not be overwritten, so you may save your work in that directory. &lt;em&gt;However, everything else on experimental nodes is permanently lost when an experiment is swapped out.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Remember: Make sure you save your work in your home directory before swapping out your experiment!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Another place you may save your files would be &lt;code&gt;/proj/YourProject&lt;/code&gt;. This directory is also NFS-mounted to all experimental nodes, so the same rules apply about writing to it a lot, as for your home directory. It is shared by all members of your project/class.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Again, on DeterLab, files ARE NOT SAVED between swap-ins. Additionally, experiments may be forcibly swapped out after a certain number of idle hours (or some maximum amount of time).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You must manually save copies of any files you want to keep in your home directory. Any files left elsewhere on the experimental nodes will be erased and lost forever. This means that if you want to store progress for a lab and come back to it later, you will need to put it in your home directory before swapping out the experiment.&lt;/p&gt;

&lt;h3 id=&#34;swap-out-vs-terminate:a35512dd4ffeaf2a562e3f9451f73393&#34;&gt;Swap Out vs Terminate&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;When to Swap Out&lt;/em&gt;
When you are done with your experiment for the time being, make sure you save your work into an appropriate location and then swap out your experiment. Swapping out is the equivalent of temporarily stopping the experiment and relinquishing the testbed resources. Swapping out is what you want to do when you are taking a break from the work, but coming back later.&lt;/p&gt;

&lt;p&gt;To do this, click &lt;em&gt;Swap Experiment Out&lt;/em&gt; link on the experiment page. This allows the resources to be de-allocated so that someone else can use them.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;When to Terminate&lt;/em&gt;
When you are completely finished with your experiment and have no intention of running it again, use the &lt;em&gt;Terminate Experiment&lt;/em&gt; link in the sidebar of the experiment page. Be careful: &lt;em&gt;termination will erase the experiment&lt;/em&gt; and you won&amp;rsquo;t be able to swap it back in without recreating it. DeterLab will then tear down your experiment, and send you an email message when the process is complete. At this point you are allowed to reuse the experiment name (say, if you wanted to create a similar experiment with different parameters).&lt;/p&gt;

&lt;p&gt;Terminating says &amp;ldquo;I won&amp;rsquo;t need this experiment ever again.&amp;rdquo; Just remember to Swap In/Out, and never &amp;ldquo;Terminate&amp;rdquo; unless you&amp;rsquo;re sure you&amp;rsquo;re completely done with the experiment. If you do end up terminating an experiment, you can always go back and recreate it.&lt;/p&gt;

&lt;h3 id=&#34;scheduling-experiment-swapout-termination-halting:a35512dd4ffeaf2a562e3f9451f73393&#34;&gt;Scheduling experiment swapout/termination #Halting&lt;/h3&gt;

&lt;p&gt;If you expect that your experiment should run for a set period of time, but you will not be around to terminate or swap the experiment out, then you should use the scheduled swapout/termination feature. This allows you to specify a maximum running time in your NS file so that you will not hold scarce resources when you are offline. To schedule a swapout or termination in your NS file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     $ns at 2000.0 &amp;quot;$ns terminate&amp;quot;
   or
     $ns at 2000.0 &amp;quot;$ns swapout&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will cause your experiment to either be terminated or swapped out after 2000 seconds of wallclock time.&lt;/p&gt;

&lt;h1 id=&#34;why-can-t-i-log-in-to-deterlab:a35512dd4ffeaf2a562e3f9451f73393&#34;&gt;Why can&amp;rsquo;t I log in to DeterLab?&lt;/h1&gt;

&lt;p&gt;DeterLab has an automatic blacklist mechanism. If you enter the wrong username and password combination too many times, your account will no longer be accessible from your current IP address.&lt;/p&gt;

&lt;p&gt;If you think that this has happened to you, try logging in from another address (if you know how), or create an issue (see [wiki:GettingHelp Getting Help]), which will relay the request to the testbed-ops group that this specific blacklist entry should be erased.&lt;/p&gt;

&lt;h1 id=&#34;installing-rpms-automatically:a35512dd4ffeaf2a562e3f9451f73393&#34;&gt;Installing RPMs automatically&lt;/h1&gt;

&lt;p&gt;The DeterLab NS extension &lt;code&gt;tb-set-node-rpms&lt;/code&gt; allows you to specify a (space-separated) list of RPMs to install on each of your nodes when it boots:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  tb-set-node-rpms $nodeA /proj/myproj/rpms/silly-freebsd.rpm
  tb-set-node-rpms $nodeB /proj/myproj/rpms/silly-linux.rpm
  tb-set-node-rpms $nodeC /proj/myproj/rpms/silly-windows.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above NS code says to install the &lt;code&gt;silly-freebsd.rpm&lt;/code&gt; file on &lt;code&gt;nodeA&lt;/code&gt;, the &lt;code&gt;silly-linux.rpm&lt;/code&gt; on &lt;code&gt;nodeB&lt;/code&gt;, and the &lt;code&gt;silly-windows.rpm&lt;/code&gt; on &lt;code&gt;nodeC&lt;/code&gt;. RPMs are installed as root, and must reside in either the project&amp;rsquo;s &lt;code&gt;/proj&lt;/code&gt; directory, or if the experiment has been created in a subgroup, in the &lt;code&gt;/groups&lt;/code&gt; directory. You may not place your RPMs in your home directory.&lt;/p&gt;

&lt;h1 id=&#34;installing-tar-files-automatically:a35512dd4ffeaf2a562e3f9451f73393&#34;&gt;Installing TAR files automatically&lt;/h1&gt;

&lt;p&gt;The DeterLab NS extension [wiki:nscommands#tb-set-node-tarfiles tb-set-node-tarfiles] allows you to specify a set of tarfiles to install on each of your nodes when it boots.&lt;/p&gt;

&lt;p&gt;While similar to the [wiki:nscommands#tb-set-node-rpms tb-set-node-rpms] command, the format of this command is slightly different in that you must specify a directory in which to unpack the tar file. This avoids problems with having to specify absolute pathnames in your tarfile, which many modern tar programs balk at.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  tb-set-node-tarfiles $nodeA /usr/site /proj/projectName/tarfiles/silly.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above NS code says to install the &lt;code&gt;silly.tar.gz&lt;/code&gt; tar file on &lt;code&gt;nodeA&lt;/code&gt; from the working directory &lt;code&gt;/usr/site&lt;/code&gt; when the node first boots. The tarfile must reside in either the project&amp;rsquo;s &lt;code&gt;/proj&lt;/code&gt; directory, or if the experiment has been created in a subgroup, in the &lt;code&gt;/groups&lt;/code&gt; directory. You may not place your tarfiles in your home directory. You may specify as many tarfiles as you wish, as long as each one is preceded by the directory it should be unpacked in, all separated by spaces.&lt;/p&gt;

&lt;h1 id=&#34;starting-your-application-automatically:a35512dd4ffeaf2a562e3f9451f73393&#34;&gt;Starting your application automatically&lt;/h1&gt;

&lt;p&gt;You may start your application automatically when your nodes boot for the first time (when an experiment is started or swapped in) by using the &lt;code&gt;tb-set-node-startcmd&lt;/code&gt; NS extension. The argument is a command string (pathname of a script or program, plus arguments) that is run as the &lt;code&gt;UID&lt;/code&gt; of the experiment creator, after the node has reached multiuser mode.&lt;/p&gt;

&lt;p&gt;The command is invoked using &lt;code&gt;/bin/csh&lt;/code&gt;, and the working directory is undefined (your script should &lt;code&gt;cd&lt;/code&gt; to the directory you need). You can specify the same program for each node, or a different program. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  tb-set-node-startcmd $nodeA &amp;quot;/proj/projectName/runme.nodeA&amp;quot;
  tb-set-node-startcmd $nodeB &amp;quot;/proj/projectName/runme.nodeB&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will run &lt;code&gt;/proj/projectName/runme.nodeA&lt;/code&gt; on nodeA and &lt;code&gt;/proj/projectName/runme.nodeB&lt;/code&gt; on nodeB. The programs must reside on the node&amp;rsquo;s local filesystem, or in a directory that can be reached via NFS. This is either the project&amp;rsquo;s &lt;code&gt;/proj&lt;/code&gt; directory, in the &lt;code&gt;/groups&lt;/code&gt; directory if the experiment has been created in a subgroup, or a project member&amp;rsquo;s home directory in &lt;code&gt;/users&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you need to see the output of your command, be sure to redirect the output into a file. You may place the file on the local node, or in one of the NFS mounted directories mentioned above. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     tb-set-node-startcmd $nodeB &amp;quot;/proj/myproj/runme &amp;gt;&amp;amp; /tmp/foo.log&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the syntax and function of &lt;code&gt;/bin/csh&lt;/code&gt; differs from other shells (including bash), specifically in redirection syntax.  Be sure to use &lt;code&gt;csh&lt;/code&gt; syntax or your start command will fail silently.&lt;/p&gt;

&lt;p&gt;The exit value of the start command is reported back to the Web Interface, and is made available to you via the experiment page. There is a listing for all of the nodes in the experiment, and the exit value is recorded in this listing. The special symbol &lt;code&gt;none&lt;/code&gt; indicates that the node is still running the start command.&lt;/p&gt;

&lt;h1 id=&#34;notifying-the-start-program-when-all-other-nodes-have-started:a35512dd4ffeaf2a562e3f9451f73393&#34;&gt;Notifying the start program when all other nodes have started&lt;/h1&gt;

&lt;p&gt;It is often necessary for your start program to determine when all of the other nodes in the experiment have started, and are ready to proceed. Sometimes called a &lt;em&gt;barrier&lt;/em&gt;, this allows programs to wait at a specific point, and then all proceed at once. DeterLab provides a simple form of this mechanism using a synchronization server that runs on a node of your choice.&lt;/p&gt;

&lt;p&gt;Specify the node in your NS file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    tb-set-sync-server $nodeB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When nodeB boots, the synchronization server will automatically start. Your software can then synchronize using the &lt;code&gt;emulab-sync&lt;/code&gt; program that is installed on your nodes. For example, your node start command might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   #!/bin/sh
   if [ &amp;quot;$1&amp;quot; = &amp;quot;master&amp;quot; ]; then
       /usr/testbed/bin/emulab-sync -i 4
   else
       /usr/testbed/bin/emulab-sync fi /usr/site/bin/dosilly
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, there are five nodes in the experiment, one of which must be configured to operate as the master, initializing the barrier to the number of clients (four in the above example) that are expected to rendezvous at the barrier. The master will by default wait for all of the clients to reach the barrier. Each client of the barrier also waits until all of the clients have reached the barrier (and of course, until the master initializes the barrier to the proper count). Any number of clients may be specified (any subset of nodes in your experiment can wait). If the master does not need to wait for the clients, you may use the &lt;em&gt;async&lt;/em&gt; option which releases the master immediately:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    /usr/testbed/bin/emulab-sync -a -i 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may also specify the &lt;em&gt;name&lt;/em&gt; of the barrier.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    /usr/testbed/bin/emulab-sync -a -i 4 -n mybarrier
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows multiple barriers to be in use at the same time. Scripts on nodeA and nodeB can be waiting on a barrier named &amp;ldquo;foo&amp;rdquo; while (other) scripts on nodeA and nodeC can be waiting on a barrier named &amp;ldquo;bar.&amp;rdquo; You may reuse an existing barrier (including the default barrier) once it has been released (all clients arrived and woken up).&lt;/p&gt;

&lt;h1 id=&#34;setting-up-ip-routing-between-nodes-routing:a35512dd4ffeaf2a562e3f9451f73393&#34;&gt;Setting up IP routing between nodes #Routing&lt;/h1&gt;

&lt;p&gt;As DETER strives to make all aspects of the network controllable by the user, we do not attempt to impose any IP routing architecture or protocol by default. However, many users are more interested in end-to-end aspects and don&amp;rsquo;t want to be bothered with setting up routes. For those users we provide an option to automatically set up routes on nodes which run one of our provided FreeBSD, Linux or [wiki:Windows  Windows XP] disk images.&lt;/p&gt;

&lt;p&gt;You can use the NS &lt;code&gt;rtproto&lt;/code&gt; syntax in your NS file to enable routing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ns rtproto protocolOption
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where the &lt;code&gt;protocolOption&lt;/code&gt; is limited to one of &lt;em&gt;Session&amp;rdquo;, &amp;ldquo;Static&amp;rdquo;, &amp;ldquo;Static-old&amp;rdquo;, or &amp;ldquo;Manual&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Session&lt;/em&gt; routing provides fully automated routing support, and is implemented by enabling &lt;code&gt;gated&lt;/code&gt; running of the OSPF protocol on all nodes in the experiment. This is not supported on [wiki:Windows#Routing Windows XP] nodes.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Static&lt;/em&gt; routing also provides automatic routing support, but rather than computing the routes dynamically, the routes are precomputed by a distributed route computation algorithm running in parallel on the experiment nodes.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Static-old&lt;/em&gt; specifies use of the older centralized route computation algorithm, precomputing the nodes when the experiment is created, and then loading them onto each node when it boots.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Manual&lt;/em&gt; routing allows you to explicitly specify per-node routing information in the NS file. To do this, use the &lt;code&gt;Manual&lt;/code&gt; routing option to &lt;code&gt;rtproto&lt;/code&gt;, followed by a list of routes using the &lt;code&gt;add-route&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$node add-route $dst $nexthop
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;where the &lt;code&gt;dst&lt;/code&gt; can be either a node, a link, or a LAN. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $client add-route $server $router
    $client add-route [$ns link $server $router] $router
    $client add-route $serverlan $router
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you would need a separate &lt;code&gt;add-route&lt;/code&gt; command to establish a route for the reverse direction; thus allowing you to specify differing forward and reverse routes if so desired. These statements are converted into appropriate &lt;code&gt;route(8)&lt;/code&gt; commands on your experimental nodes when they boot.&lt;/p&gt;

&lt;p&gt;In the above examples, the first form says to set up a manual route between &lt;code&gt;$client&lt;/code&gt; and &lt;code&gt;$server&lt;/code&gt;, using &lt;code&gt;$router&lt;/code&gt; as the nexthop; &lt;code&gt;$client&lt;/code&gt; and &lt;code&gt;$router&lt;/code&gt; should be directly connected, and the interface on &lt;code&gt;$server&lt;/code&gt; should be unambiguous; either directly connected to the router, or an edge node that has just a single interface.&lt;/p&gt;

&lt;p&gt;[[Image(routing.png)]]&lt;/p&gt;

&lt;p&gt;If the destination has multiple interfaces configured, and it is not connected directly to the nexthop, the interface that you are intending to route to is ambiguous. In the topology shown to the right, &lt;code&gt;$nodeD&lt;/code&gt; has two interfaces configured. If you attempted to set up a route like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $nodeA add-route $nodeD $nodeB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you would receive an error since DeterLab staff would not easily be able to determine which of the two links on &lt;code&gt;$nodeD&lt;/code&gt; you are referring to. Fortunately, there is an easy solution. Instead of a node, specify the link directly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $nodeA add-route [$ns link $nodeD $nodeC] $nodeB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells us exactly which link you mean, enabling us to convert that information into a proper &lt;code&gt;route&lt;/code&gt; command on &lt;code&gt;$nodeA&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The last form of the &lt;code&gt;add-route&lt;/code&gt; command is used when adding a route to an entire LAN. It would be tedious and error prone to specify a route to each node in a LAN by hand. Instead, just route to the entire network:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    set clientlan [$ns make-lan &amp;quot;$nodeE $nodeF $nodeG&amp;quot; 100Mb 0ms]
    $nodeA add-route $clientlan $nodeB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In general, it is still best practice to use either &lt;em&gt;Session&amp;rdquo; or &amp;ldquo;Static&lt;/em&gt; routing for all but small, simple topologies. Explicitly setting up all the routes in even a moderately-sized experiment is extremely error prone. Consider this: a recently created experiment with 17 nodes and 10 subnets &lt;em&gt;required 140 hand-created routes in the NS file&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Two final, cautionary notes on routing:
    * The default route &lt;em&gt;must&lt;/em&gt; be set to use the control network interface. You might be tempted to set the default route on your nodes to reduce the number of explicit routes used. &lt;em&gt;Please avoid this.&lt;/em&gt; That would prevent nodes from contacting the outside world, i.e., you.
    * If you use your own routing daemon, you must avoid using the control network interface in the configuration. Since every node in the testbed is directly connected to the control network LAN, a naive routing daemon configuration will discover that any node is just one hop away, via the control network, from any other node and &lt;em&gt;all&lt;/em&gt; inter-node traffic will be routed via that interface.&lt;/p&gt;

&lt;p&gt;[wiki:CoreQuickstart &amp;lt; Core Quick Start] | [wiki:Topologies Sample Topologies &amp;gt;]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sign Up</title>
      <link>http://deter-project.github.io/SignUp/</link>
      <pubDate>Thu, 12 Nov 2015 07:54:14 -0800</pubDate>
      
      <guid>http://deter-project.github.io/SignUp/</guid>
      <description>

&lt;h1 id=&#34;getting-an-account:be6bb6cac7b36defc6fd573e81b159b3&#34;&gt;Getting an Account&lt;/h1&gt;

&lt;h2 id=&#34;who-may-apply-for-a-deter-project-or-request-a-user-account:be6bb6cac7b36defc6fd573e81b159b3&#34;&gt;Who may apply for a DETER project or request a user account?&lt;/h2&gt;

&lt;p&gt;Researchers from academia, government, and industry &amp;ndash; as well as educators from academic institutions &amp;ndash; may apply for a DeterLab project account. A student must have their professor or appropriate faculty member apply for an account, and once it is activated the student can then apply for membership to that project.&lt;/p&gt;

&lt;p&gt;&lt;small&gt; For more information on using DeterLab for education, please refer to the  &lt;a href=&#34;https://education.deterlab.net&#34; target=&#34;_blank&#34;&gt;DeterLab Education Site&lt;/a&gt;. &lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&#34;to-register:be6bb6cac7b36defc6fd573e81b159b3&#34;&gt;To Register&lt;/h2&gt;

&lt;p&gt;DETER accounts are grouped by projects, therefore the project leader or PI must first request a project, then other users apply for membership to that project.&lt;/p&gt;

&lt;p&gt;&lt;small&gt; If you already have a DeterLab account, please login in first. This will help streamline the process. &lt;/small&gt;&lt;/p&gt;

&lt;h3 id=&#34;requesting-a-new-project:be6bb6cac7b36defc6fd573e81b159b3&#34;&gt;Requesting a New Project&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If you are a PI, project leader or instructor who wants to request a new project on DeterLab, fill out the &lt;a href=&#34;https://www.isi.deterlab.net/newproject.php&#34; target=&#34;_blank&#34;&gt;New Project Application Form&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;You will be asked a number of questions about your project and how you intend to use DETER. Please be detailed, especially with respect to any possible risks from your experiment. A DETER staff member may contact you to discuss or clarify any potential issues.&lt;/li&gt;
&lt;li&gt;The project leader is responsible for ensuring that the project adheres to the Project Plan included in the application form.&lt;/li&gt;
&lt;li&gt;Instructors should indicate this project is for educational purposes. Once the project is created, you will receive further instructions including how to create accounts for your students.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Upon submission, your application must be approved by the DETER Executive Committee; this generally takes a few days. They may contact you and ask for clarification.&lt;/li&gt;
&lt;li&gt;You will receive an email notification upon approval and your user account will be active. You may log in with the username and password you entered on the form.&lt;/li&gt;
&lt;li&gt;If you are curious about the progress on your application, you may &lt;a href=&#34;http://www.deter-project.org/contact_deter&#34; target=&#34;_blank&#34;&gt;contact us&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;getting-a-user-account-to-join-an-existing-project:be6bb6cac7b36defc6fd573e81b159b3&#34;&gt;Getting a User Account to Join an Existing Project&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If you are a team member who needs to join an existing project, submit the &lt;a href=&#34;https://www.isi.deterlab.net/joinproject.php&#34; target=&#34;_blank&#34;&gt;Apply for Project Membership Form&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The project leader will be informed via email of your request and will be required to log in to approve your account.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;note-to-students:be6bb6cac7b36defc6fd573e81b159b3&#34;&gt;Note to Students&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;If you are a student who wants to use DeterLab for your own research:

&lt;ul&gt;
&lt;li&gt;A faculty sponsor must first fill out the &lt;a href=&#34;https://www.isi.deterlab.net/newproject.php&#34; target=&#34;_blank&#34;&gt;New Project Application Form&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Once this has been done, the sponsor will instruct you to &lt;a href=&#34;https://www.isi.deterlab.net/joinproject.php&#34; target=&#34;_blank&#34;&gt;apply for project membership&lt;/a&gt; which will create your DeterLab account. You must obtain the name of the DeterLab project from your sponsor to correctly fill out the form.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;If you are a student taking a class that uses DeterLab:

&lt;ul&gt;
&lt;li&gt;You do not need to take any action – your instructor will create accounts and assign them to students.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;getting-help:be6bb6cac7b36defc6fd573e81b159b3&#34;&gt;Getting Help&lt;/h2&gt;

&lt;p&gt;If you run into trouble, please &lt;a href=&#34;http://www.deter-project.org/contact_deter&#34; target=&#34;_blank&#34;&gt;contact us&lt;/a&gt; and we will be happy to assist.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sample Topologies</title>
      <link>http://deter-project.github.io/Topologies/</link>
      <pubDate>Thu, 12 Nov 2015 07:54:14 -0800</pubDate>
      
      <guid>http://deter-project.github.io/Topologies/</guid>
      <description>

&lt;p&gt;The following are various topologies you can use to experiment with DeterLab Core.&lt;/p&gt;

&lt;h1 id=&#34;toy-topologies:d3fbf34d48fc7486fe81021cd7fc167c&#34;&gt;Toy topologies&lt;/h1&gt;

&lt;h2 id=&#34;lan:d3fbf34d48fc7486fe81021cd7fc167c&#34;&gt;LAN&lt;/h2&gt;

&lt;p&gt;[[Image(lan.png)]]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set ns [new Simulator]
source tb_compat.tcl

# Change this to a number of nodes you want
set NODES 5

set lanstr &amp;quot;&amp;quot;
for {set i 0} {$i &amp;lt; $NODES} {incr i} {
    set node($i) [$ns node]
    append lanstr &amp;quot;$node($i) &amp;quot;
}

# Change the BW and delay if you want
set lan0 [$ns make-lan &amp;quot;$lanstr&amp;quot; 100Mb 0ms]

$ns rtproto Static
$ns run
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ring:d3fbf34d48fc7486fe81021cd7fc167c&#34;&gt;Ring&lt;/h2&gt;

&lt;p&gt;[[Image(ring.png)]]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set ns [new Simulator]
source tb_compat.tcl

# Change this to a number of nodes you want
set NODES 5

set node(0) [$ns node]
for {set i 1} {$i &amp;lt; $NODES} {incr i} {
    set node($i) [$ns node]
    set lastindex [expr $i-1]

    # Change BW and delay if you want
    set Link$i [$ns duplex-link $node($i) $node($lastindex) 100Mb 0ms DropTail]
}

set lastindex [expr $i-1]

# Change BW and delay if you want
set Link$i [$ns duplex-link $node(0) $node($lastindex) 100Mb 0ms DropTail]

$ns rtproto Static
$ns run
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dumbbell:d3fbf34d48fc7486fe81021cd7fc167c&#34;&gt;Dumbbell&lt;/h2&gt;

&lt;p&gt;[[Image(dumbbell.png)]]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set ns [new Simulator]
source tb_compat.tcl

# Change this to a number of nodes you want
set NODES 10

set rem 0
set l 0
for {set i 0} {$i &amp;lt; 2} {incr i} {
   set node($rem) [$ns node]
   for {set j 1} {$j &amp;lt; $NODES/2} {incr j} {
    set index [expr $rem+$j]
    set node($index) [$ns node]

    # Change BW and delay if you want
    set Link$l [$ns duplex-link $node($rem) $node($index) 100Mb 0ms DropTail]

    set l [expr $l+1]
   }
  set rem [expr $rem+$NODES/2]
}
set rem [expr $NODES/2]

# Change BW and delay if you want
set Link$l [$ns duplex-link $node($rem) $node(0) 100Mb 0ms DropTail]

$ns rtproto Static
$ns run
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tree:d3fbf34d48fc7486fe81021cd7fc167c&#34;&gt;Tree&lt;/h2&gt;

&lt;p&gt;[[Image(tree.png)]]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set ns [new Simulator]
source tb_compat.tcl

# Change fanout if you want but bear in mind that some of
# our nodes have only 5 interfaces, so max # of experimental
# interfaces (and fan out) is 4
set FANOUT 3

# Change depth if you want
set DEPTH 3

set node(0) [$ns node]
set lastj 0
set f $FANOUT
set lastl 0
for {set i 0} {$i &amp;lt; $DEPTH} {incr i} {
    for {set j 1} {$j &amp;lt;= $f} {incr j} {
    set index [expr $lastj+$j]
    set node($index) [$ns node]
    set lastindex [expr ($index-1)/$FANOUT]

    # Change BW and delay if you want
    set Link$lastl [$ns duplex-link $node($index) $node($lastindex) 100Mb 0ms DropTail]
    set lastl [expr $lastl+1]
   }
set f [expr $f*$FANOUT]
set lastj [expr $lastj+$j-1]
}

$ns rtproto Static
$ns run
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;real-as-topologies:d3fbf34d48fc7486fe81021cd7fc167c&#34;&gt;Real AS topologies&lt;/h1&gt;

&lt;p&gt;Because most of our PCs have up to 4 experimental interfaces, note that some of these topologies may have to be modified to have a fan out of at most 4.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cs.purdue.edu/homes/fahmy/software/rf2ns/topo/&#34;&gt;http://www.cs.purdue.edu/homes/fahmy/software/rf2ns/topo/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[wiki:CoreGuide &amp;lt; Core Guide] | [wiki:UsingNodes Using Your Nodes &amp;gt;]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Nodes</title>
      <link>http://deter-project.github.io/UsingNodes/</link>
      <pubDate>Thu, 12 Nov 2015 07:54:14 -0800</pubDate>
      
      <guid>http://deter-project.github.io/UsingNodes/</guid>
      <description>

&lt;h1 id=&#34;know-your-deter-servers:346b9e50ca891863d0f276733701095f&#34;&gt;Know your DETER servers&lt;/h1&gt;

&lt;p&gt;Here are the most important things to know.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;www.isi.deterlab.net&lt;/code&gt; is the primary web interface for the testbed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;users.isi.deterlab.net&lt;/code&gt; is the host through which the testbed nodes are accessed and it is primary file server.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scratch&lt;/code&gt; is the local package mirror for CentOS, Ubuntu, and FreeBSD.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;hostnames-for-your-nodes:346b9e50ca891863d0f276733701095f&#34;&gt;Hostnames for your nodes&lt;/h1&gt;

&lt;p&gt;We set up names for your nodes in DNS and &lt;code&gt;/etc/hosts&lt;/code&gt; files for use on the nodes in the experiment. Since our nodes have multiple interfaces (the control network, and, depending on the experiment, possibly several experimental interfaces) determining which name refers to which interface can be somewhat confusing. The rules below should help you figure this out.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;From users.isi.deterlab.net&lt;/em&gt; - We set up names in the form of &lt;code&gt;node.expt.proj.isi.deterlab.net&lt;/code&gt; in DNS, so that they are visible anywhere on the Internet. This name always refers to the node&amp;rsquo;s control network interface, which is the only one reachable from &lt;code&gt;users.isi.deterlab.net&lt;/code&gt;. You can use &lt;code&gt;node.expt.proj&lt;/code&gt; as a shorthand.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;On the nodes themselves&lt;/em&gt; - There are three basic ways to refer to the interfaces of a node. The first is stored in DNS, and the second two are stored on the node in the &lt;code&gt;/etc/hosts&lt;/code&gt; file.

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Fully-qualified hostnames&amp;rdquo; - These names are the same ones visible from the outside world, and referred to by attaching the full domain name: ie. &lt;code&gt;node.expt.proj.isi.deterlab.net&lt;/code&gt;. (Note that, since we put &amp;ldquo;.isi.deterlab.net&lt;/em&gt; in the nodes&amp;rsquo; domain search paths, you can use &lt;code&gt;node.expt.proj&lt;/code&gt; as a shorthand.) This name always refers to the control network.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;node-link form&lt;/em&gt; - You can refer to an individual experimental interface by suffixing it with the name of the link or LAN (as defined in your NS file) that it is a member of. For example, &lt;code&gt;nodeA-link0&lt;/code&gt; or &lt;code&gt;server-serverLAN&lt;/code&gt;. This is the preferred way to refer to experimental interfaces, since it uniquely and unambiguously identifies an interface.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Short form&amp;rdquo; - If a node is directly connected to the node you&amp;rsquo;re on, you can refer to that node simply with its name (eg. &lt;code&gt;nodeA&lt;/code&gt;.) Note that this differs from the fully- qualified name in that no domain is given. We also create short names for nodes you are not directly connected to. However, if two nodes are connected with more than one interface, or there is more than one route between them, there is no guarantee that the short name has been associated with the one is on the best (ie. shortest or highest bandwidth) path - so, if there is ambiguity, we strongly suggest that you use the &amp;ldquo;node-link&lt;/em&gt; form.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; It is a bad idea to pick virtual node names in your topology that clash with the physical node names in the testbed, such as &amp;ldquo;pc45&amp;rdquo;.&lt;/p&gt;

&lt;h1 id=&#34;logging-into-your-node:346b9e50ca891863d0f276733701095f&#34;&gt;Logging into your Node&lt;/h1&gt;

&lt;p&gt;By the time you receive the email message listing your nodes, the DETER configuration system will have ensured that your nodes are fully configured and ready to use. If you have selected one of the DETER-supported operating system images ([wiki:OSImages see supported images]), this configuration process includes:
    * loading fresh disk images so that each node is in a known clean state;
    * rebooting each node so that it is running the OS specified in the NS script;
    * configuring each of the network interfaces so that each one is &amp;ldquo;up&amp;rdquo; and talking to its virtual LAN (VLAN);
    * creating user accounts for each of the project members;
    * mounting the projects NFS directory in /proj so that project files are easily shared amongst all the nodes in the experiment;
    * creating a /etc/hosts file on each node so that you may refer to the experimental interfaces of other nodes by name instead of IP number;
    * configuring all of the delay parameters;
    * configuring the serial console lines so that project members may access the console ports from users.isi.deterlab.net.&lt;/p&gt;

&lt;p&gt;As this point you may log into any of the nodes in your experiment. You will need to use [wiki:DETERSSH Secure Shell (ssh)] to log into &lt;em&gt;users.isi.deterlab.net&lt;/em&gt;
Your login name and password will be the same as your Web Interface login and password.  &lt;em&gt;Please note that although you can log into the web interface using your email address instead of your login name, you must use your login name when logging into users.isi.deterlab.net.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once logged into users you can then [wiki:DETERSSH ssh] to your nodes.  You should use the `qualified name&amp;rsquo; from the nodes mapping table so that you do not form dependencies on any particular physical node.  For more information on using SSH with DETER, please take a look at the [wiki:DETERSSH DETER SSH] wiki page.&lt;/p&gt;

&lt;h1 id=&#34;how-do-i-install-software-onto-my-node:346b9e50ca891863d0f276733701095f&#34;&gt;How do I install software onto my node?&lt;/h1&gt;

&lt;p&gt;Each [wiki:OSImages Supported Operating System] have packages mirrored on a host called scratch and each operating system is configured to use this system to fetch packages from.  Information for specific operating systems is documented there.&lt;/p&gt;

&lt;h2 id=&#34;how-do-i-copy-files-onto-my-node:346b9e50ca891863d0f276733701095f&#34;&gt;How do I copy files onto my node?&lt;/h2&gt;

&lt;p&gt;Your home directory on users is automatically mounted via NFS on every node in your experiment.  As are your project directory in /proj and a special filesystem called /share.&lt;/p&gt;

&lt;h1 id=&#34;i-need-root-access:346b9e50ca891863d0f276733701095f&#34;&gt;I need &lt;em&gt;root&lt;/em&gt; access!&lt;/h1&gt;

&lt;p&gt;If you need to customize the configuration, or perhaps reboot nodes, you can use the &amp;ldquo;sudo&amp;rdquo; command, located in &lt;code&gt;/usr/local/bin&lt;/code&gt; on FreeBSD and &amp;lsquo;/usr/bin&amp;rsquo; Linux. All users are added to the Administrators group on [wiki:Windows Windows XP] nodes. Our policy is very liberal; you can customize the configuration in any way you like, provided it does not interfere with the operation of the testbed. As as example, to reboot a node that is running FreeBSD:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    /usr/local/bin/sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, every testbed node has an automatically generated root password.  Simply click on a node in the &amp;ldquo;Reserved Nodes&amp;rdquo; for your experiment and look at the &amp;ldquo;root_password&amp;rdquo; attribute.&lt;/p&gt;

&lt;h1 id=&#34;can-i-access-the-nodes-console-serialconsole:346b9e50ca891863d0f276733701095f&#34;&gt;Can I access the nodes console? #SerialConsole&lt;/h1&gt;

&lt;p&gt;Yes. Each of the PCs has its own serial console line connected to a [wiki:Tutorial/WalkThrough#serialserver serial server].  You can connect to a nodes serial console through the &amp;ldquo;users&amp;rdquo; machine, using our &lt;code&gt;console&lt;/code&gt; program located in &amp;lsquo;/usr/testbed/bin&amp;rsquo;. For example, to connect over serial line to &amp;ldquo;pc001&amp;rdquo; in your experiment, ssh into &lt;em&gt;users.isi.deterlab.net&lt;/em&gt;, and then type &lt;code&gt;console pc001&lt;/code&gt; at the Unix prompt. You may then interact with the serial console (hit &amp;ldquo;enter&amp;rdquo; to elicit output from the target machine).&lt;/p&gt;

&lt;p&gt;To exit the console program, type &lt;code&gt;Ctrl-]&lt;/code&gt;; its just a telnet session.&lt;/p&gt;

&lt;p&gt;In any case, all console output from each node is saved so that you may look at it it later. For each node, the console log is stored as &lt;code&gt;/var/log/tiplogs/pcXXX.run&lt;/code&gt;. This &lt;em&gt;run&lt;/em&gt; file is created when nodes are first allocated to an experiment, and the Unix permissions of the run files permit only members of the project to view them. When the nodes are deallocated, the run files are cleared, so if you want to save them, you must do so before terminating the experiment.&lt;/p&gt;

&lt;p&gt;In addition, you can view the console logs from the web interface, on the Show Experiment page. Of course, you may not interact with the console, but you can at least view the current log.&lt;/p&gt;

&lt;p&gt;Escape codes for Dell serial consoles are documented [wiki:DellSerialConsole here].&lt;/p&gt;

&lt;h1 id=&#34;my-node-is-wedged:346b9e50ca891863d0f276733701095f&#34;&gt;My node is wedged!&lt;/h1&gt;

&lt;p&gt;Power cycling a node is easy since every node on the testbed is connected to a [wiki:Tutorial/WalkThrough#powercontroller power controller].  If you need to power cycle a node, log on to users.isi.deterlab.net and use the &amp;ldquo;node_reboot&amp;rdquo; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    node_reboot &amp;lt;node&amp;gt; [node ... ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;node&lt;/code&gt; is the physical name, as listed in the node mapping table. You may provide more than one node on the command line. Be aware that you may power cycle only nodes in projects that you are member of. Also, &lt;code&gt;node_reboot&lt;/code&gt; does its very best to perform a clean reboot before resorting to cycling the power to the node. This is to prevent the damage that can occur from constant power cycling over a long period of time. For this reason, &lt;code&gt;node_reboot&lt;/code&gt; may delay a minute or two if it detects that the machine is still responsive to network transmission. In any event, please try to reboot your nodes first (see above).
You may also reboot all the nodes in an experiment by using the &lt;code&gt;-e&lt;/code&gt; option to specify the project and experiment names. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    node_reboot -e testbed,multicast
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will reboot all of the nodes reserved in the &amp;ldquo;multicast&amp;rdquo; experiment in the &amp;ldquo;testbed&amp;rdquo; project. This option is provided as a shorthand method for rebooting large groups of nodes.&lt;/p&gt;

&lt;h1 id=&#34;i-want-to-load-a-fresh-operating-system-on-my-node:346b9e50ca891863d0f276733701095f&#34;&gt;I want to load a fresh operating system on my node&lt;/h1&gt;

&lt;p&gt;Scrogging your disk is certainly not as common, but it does happen. You can either swap your experiment out and then back in (which will allocate another group of nodes), or if you prefer you can reload the disk image yourself. You will of course lose anything you have stored on that disk; it is a good idea to store only data that can be easily recreated, or else store it in your project directory in &lt;code&gt;/proj&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Reloading your disk with a fresh copy of an image is easy, and requires no intervention by DETER staff:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    os_load [-i ImageName] [-p Project] &amp;lt;node&amp;gt; [node ... ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you do not specify an image name, the default image for that node type will be loaded (typically Ubuntu1004-STD).  For testbed wide images, you do not have to specify a project.  The os_load command will wait (not exit) until the nodes have been reloaded, so that you do not need to check the console lines of each node to determine when the load is done.&lt;/p&gt;

&lt;p&gt;For example, to load the image &amp;lsquo;testpc167&amp;rsquo; which is in the project &amp;lsquo;DeterTest&amp;rsquo; onto pc167, we type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;users &amp;gt; os_load -i testpc167 -p DeterTest pc167
osload (pc167): Changing default OS to [OS 998: DeterTest,testpc167]
osload: Updating image signature.
Setting up reload for pc167 (mode: Frisbee)
osload: Issuing reboot for pc167 and then waiting ...
reboot (pc167): Attempting to reboot ...
reboot (pc167): Successful!
reboot: Done. There were 0 failures.
reboot (pc167): child returned 0 status.
osload (pc167): still waiting; it has been 1 minute(s)
osload (pc167): still waiting; it has been 2 minute(s)
osload (pc167): still waiting; it has been 3 minute(s)
osload (pc167): still waiting; it has been 4 minute(s)
osload: Done! There were 0 failures.
users &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;i-only-want-certain-types-of-nodes-for-my-experiment:346b9e50ca891863d0f276733701095f&#34;&gt;I only want certain types of nodes for my experiment&lt;/h1&gt;

&lt;p&gt;The NS command &lt;em&gt;tb-set-hardware&lt;/em&gt; only lets you pick one type of hardware.  If you are fine with a couple of different kinds of hardware, say you just want nodes that are at ISI part of the testbed, you can define a virtual node type in your NS file.  For more information on virtual types, please refer to the [wiki:nscommands#VirtualTypeCommands Virtual Type Commands] section of the NS command reference.  Here is a quick example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tb-make-soft-vtype ISI {pc2133 pc3000 pc3060 pc3100} 
tb-make-soft-vtype UCB {bpc2133 bpc3000 bpc3060}

tb-set-hardware $atISI ISI
tb-set-hardware $atUCB UCB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[wiki:Topologies &amp;lt; Sample Topologies] | [wiki:LegoTG Generating Traffic in LegoTG &amp;gt;]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>http://deter-project.github.io/WikiStart/</link>
      <pubDate>Thu, 12 Nov 2015 07:54:14 -0800</pubDate>
      
      <guid>http://deter-project.github.io/WikiStart/</guid>
      <description>

&lt;h1 id=&#34;getting-an-account:2482b6fa94d341223660bf6920719a55&#34;&gt;Getting an Account&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://deter-project.github.io/Policy&#34;&gt;The DeterLab usage policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deter-project.github.io/GettingStarted&#34;&gt;Registering to use DeterLab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;getting-started:2482b6fa94d341223660bf6920719a55&#34;&gt;Getting Started&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://deter-project.github.io/CoreQuickstart&#34;&gt;DeterLab Core Quickstart&lt;/a&gt; - a high level overview of DeterLab Core&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deter-project.github.io/CoreGuide&#34;&gt;DeterLab Core Guide&lt;/a&gt; - includes a basic tutorial as well as some advanced topics&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deter-project.github.io/Topologies&#34;&gt;Sample Topologies&lt;/a&gt; - Some sample topologies to help you learn NS syntax&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deter-project.github.io/UsingNodes&#34;&gt;Using Your Nodes&lt;/a&gt; - Information about accessing and using your experimental nodes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deter-project.github.io/LegoTG&#34;&gt;Generating Traffic&lt;/a&gt; - Using the LegoTG framework to generate traffic for your experiment&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deter-project.github.io/Sharing&#34;&gt;Using Shared Materials&lt;/a&gt; - Sharing files and other elements of your experiment within DeterLab&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deter-project.github.io/CoreReference&#34;&gt;Core Reference&lt;/a&gt; - Information about system commands, nodes, image IDs, OSIDs and more&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deter-project.github.io/DETERSSH&#34;&gt;Accessing testbed nodes using SSH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deter-project.github.io/SerialConsole&#34;&gt;Using the Serial Console on testbed nodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deter-project.github.io/Glossary&#34;&gt;Glossary&lt;/a&gt; - List of terms used throughout DeterLab&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;technical-support:2482b6fa94d341223660bf6920719a55&#34;&gt;Technical Support&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Read through &lt;a href=&#34;http://deter-project.github.io/FrequentlyAskedQuestions&#34;&gt;Frequently Asked Questions about DeterLab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you still need assistance, read &lt;a href=&#34;http://deter-project.github.io/GettingHelp&#34;&gt;Getting Help&lt;/a&gt; to use our support ticketing system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: To view, search and file tickets, you must be logged in with your DeterLab testbed account.&lt;/p&gt;

&lt;h1 id=&#34;capabilities-for-experimentation:2482b6fa94d341223660bf6920719a55&#34;&gt;Capabilities for Experimentation&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://deter-project.github.io/OrchestratorQuickstart&#34;&gt;Orchestration (MAGI)&lt;/a&gt; - Communications and control system for repeatable experimentation.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deter-project.github.io/ContainersQuickstart&#34;&gt;Virtualization (Containers)&lt;/a&gt; - For creating large-scale  DETER topologies that support differing degrees of fidelity in individual elements. Helpful for experiments requiring 400+ computers.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fedd.deterlab.net/trac&#34;&gt;Federation&lt;/a&gt; - Federation architecture for creating experiments that span multiple testbeds through dynamically acquiring resources from other testbeds.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://abac.deterlab.net/&#34;&gt;Attribute-Based Access Control (ABAC)&lt;/a&gt; - Scalable authorization system used with the federation capability.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;core-reference-documentation:2482b6fa94d341223660bf6920719a55&#34;&gt;Core Reference Documentation&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Commands

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://deter-project.github.io/DeterLabCommands&#34;&gt;DeterLab Shell Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deter-project.github.io/nscommands&#34;&gt;NS Command Extensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Architecture and Network (TBD)&lt;/li&gt;
&lt;li&gt;Nodes

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://deter-project.github.io/Swapping&#34;&gt;Node Use (Swapping) Policies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deter-project.github.io/DETERSSH&#34;&gt;Accessing testbed nodes using SSH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deter-project.github.io/NodeTypes&#34;&gt;Available Node Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deter-project.github.io/NetFPGA_nodes&#34;&gt;Available NetFPGA Nodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deter-project.github.io/SerialConsole&#34;&gt;Using the Serial Console on testbed nodes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;OS and Image IDs

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://deter-project.github.io/OSImages&#34;&gt;Operating Systems supported by DETER and details about using them&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deter-project.github.io/CustomOS&#34;&gt;Custom OSIDs and Image IDs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deter-project.github.io/LegacyTools&#34;&gt;Legacy Tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://deter-project.github.io/AnonymityModule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://deter-project.github.io/AnonymityModule/</guid>
      <description>

&lt;h1 id=&#34;introduction:49601fcc70443e8a9f263221deee393b&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This has been created as a classroom exercise explaining and demonstrating a few different techniques in active anonymity, and intercepting and making sense of web traffic.
Throughout this exercise you will:
* Learn about various forms of anonymity and tools that can be used
* Use DETER to do the following:
   * Set up a web server in Linux
   * Set up a proxy server
   * Capture web traffic using tcpdump
   * Analyze that traffic using wireshark
* Use the knowledge gained to determine the strengths and weaknesses of these different practices and technologies&lt;/p&gt;

&lt;p&gt;Anonymity is important because it allows a user to communicate with a service or another user without fear of someone eavesdropping or figuring out their location.  When two systems communicate directly, it makes it easy for someone to figure out who is talking to who and what they are saying.  Keeping your identity hidden is important because it can keep large companies and organizations from collecting your information. Anonymity tools can help them communicate more securely. There are many tools and practices that can be used to help maintain anonymity, and this lesson covers two.&lt;/p&gt;

&lt;h2 id=&#34;proxy:49601fcc70443e8a9f263221deee393b&#34;&gt;Proxy&lt;/h2&gt;

&lt;p&gt;One method of hiding your identity would be using a proxy server which works by acting as a mediator between you and the service you are communicating with.  Proxies are used to hide web traffic from the service the user is attempting to connect to.  All the data you send and all the data you receive goes through it.  By connection through a proxy the user is able to camouflage his actual identity so that the service only sees the address of the proxy.&lt;br /&gt;
The benefits of using a proxy are
* Setting up proxies does not take long
* They do hide your traffic&lt;/p&gt;

&lt;p&gt;But there are a few drawbacks to this
* One is that it is not hard to determine that the traffic is coming through a proxy.
* Another is that the proxy is able to see both the user and the service, so it knows the identity of both parties.&lt;/p&gt;

&lt;h2 id=&#34;onion-routing-tor:49601fcc70443e8a9f263221deee393b&#34;&gt;Onion Routing &amp;amp; Tor&lt;/h2&gt;

&lt;p&gt;Another method of cloaking one&amp;rsquo;s identity is through using a program called &lt;a href=&#34;https://www.torproject.org/&#34;&gt;Tor&lt;/a&gt;  Tor takes the proxy idea and expands it using the idea of onion routing.  Onion routing is an anonymity tool which uses multiple routers to hide web traffic from the sender to the server. The web data is encrypted using layers, with each layer being removed at the subsequent routers. This means that each router can only see two parts of the traffic, the preceding node and the next node. Therefore a compromised node would not lead to the identity of either person being revealed.&lt;/p&gt;

&lt;p&gt;[[Image(onion.png)]]
This image was obtained from &lt;a href=&#34;http://en.wikipedia.org/wiki/File:Onion&#34;&gt;http://en.wikipedia.org/wiki/File:Onion&lt;/a&gt; diagram.svg&lt;/p&gt;

&lt;p&gt;For this exercise, we are going to set up a network with 11 different nodes.  2 nodes will be client nodes, Alice and Bob, which will be making HTTP requests from 2 other nodes, Server1 and Server2, which will be running Apache2.  There will be a proxy node running tinyproxy, 4 nodes running the Tor program, and 2 routers. Once we set up the network, we will set up tinyproxy on the proxy node and Apache2 on the 2 Server nodes.  Then we will have Alice make HTTP requests of the Server1 node directly, through the proxy, and through the Tor network, while we sniff the requests.  The &amp;ldquo;Wide Area&amp;rdquo; should be treated as a cloud of an unknown number of computers and routers, representing a large network where we are just highlighting the nodes used for Tor. We will then analyze this data using Wireshark to determine who is communicating and what they are saying.&lt;/p&gt;

&lt;h1 id=&#34;creating-the-experiment:49601fcc70443e8a9f263221deee393b&#34;&gt;Creating the Experiment&lt;/h1&gt;

&lt;p&gt;Open SSH Secure File Transfer Client&lt;/p&gt;

&lt;p&gt;[[Image(sshclientstart.png)]]&lt;/p&gt;

&lt;p&gt;Click on the Quick Connect Button&lt;/p&gt;

&lt;p&gt;[[Image(sshclientlogon.png)]]&lt;/p&gt;

&lt;p&gt;It should look like this. Click Connect, and enter your password when prompted.  In the right column you should put [attachment:tor_setup.tgz this tar file]&lt;/p&gt;

&lt;p&gt;Then log in to &lt;em&gt;users.isi.deterlab.net&lt;/em&gt; through &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34;&gt;Putty.&lt;/a&gt; For help on logging onto Putty check out &lt;a href=&#34;https://trac.deterlab.net/wiki/DETERSSH&#34;&gt;this&lt;/a&gt; tutorial. Move the tar file to &lt;code&gt;/proj/project_name&lt;/code&gt; where project_name is your project&amp;rsquo;s name by typing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp tor_setup.tgz /proj/project_name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in [attachment:anonymous.2.ns this NS file] replace YOURPROJECT with the name of your project&lt;/p&gt;

&lt;p&gt;[[Image(networksetup.png)]]&lt;/p&gt;

&lt;p&gt;After changing the NS file you are now ready to create your experiment! Log into &lt;a href=&#34;https://www.isi.deterlab.net/&#34;&gt;https://www.isi.deterlab.net/&lt;/a&gt; and use the instructions starting on page 11 &lt;a href=&#34;http://www.isi.edu/deter/docs/DETER_Tutorial-TF-Jan2011.pdf&#34;&gt;http://www.isi.edu/deter/docs/DETER_Tutorial-TF-Jan2011.pdf&lt;/a&gt; to create the experiment. Keep in mind that you already have the NS file, so you will not need to use the graphical tool to create one.  Now you can swap in your experiment! Use the same link page 18 &lt;a href=&#34;http://www.isi.edu/deter/docs/DETER_Tutorial-TF-Jan2011.pdf&#34;&gt;http://www.isi.edu/deter/docs/DETER_Tutorial-TF-Jan2011.pdf&lt;/a&gt; to swap it in.&lt;/p&gt;

&lt;p&gt;If you are experiencing problems dealing with creating the experiment &lt;a href=&#34;https://trac.deterlab.net/wiki/Tutorial/CreatingExperiments&#34;&gt;https://trac.deterlab.net/wiki/Tutorial/CreatingExperiments&lt;/a&gt; also provides a walk through&lt;/p&gt;

&lt;h1 id=&#34;step-2-setting-up-the-network:49601fcc70443e8a9f263221deee393b&#34;&gt;Step 2 Setting Up the Network&lt;/h1&gt;

&lt;h2 id=&#34;setting-up-apache:49601fcc70443e8a9f263221deee393b&#34;&gt;Setting up apache&lt;/h2&gt;

&lt;p&gt;We need to generate traffic in our network and one of the easiest ways to do that is with HTTP traffic, so we need to set up a server and a web page.  SSH into Server1 by using the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh Server1.ExperimentName.ProjectName
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run [attachment:runme.apache this script] with the &lt;code&gt;sudo&lt;/code&gt; command. In order to put the script file into the DeterLab environment connect with the SSH File Transfer Client. This will most likely put the script in /users/UserName/ first you must make the command executable, so use the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chmod 0755 /users/UserName/runme.apache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now run the script using the command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /users/UserName/runme.apache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the code the script contains:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#! /bin/sh

apt-get install apache2

echo &amp;quot;ServerName localhost&amp;quot; | sudo tee /etc/apache2/conf.d/fqdn

echo &amp;quot;#!/usr/bin/env python\nimport cgi\nimport os\n\nprint \&amp;quot;Content-type: text/html\&amp;quot; \nprint \&amp;quot;\&amp;quot; \n\nprint cgi.escape(os.environ[\&amp;quot;REMOTE_ADDR\&amp;quot;])&amp;quot; &amp;gt; /usr/lib/cgi-bin/ip.txt

mv /usr/lib/cgi-bin/ip.txt /usr/lib/cgi-bin/ip.cgi

chmod 755 /usr/lib/cgi-bin/ip.cgi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will run a script with Apache 2 which sets up the server and web page and displays the users IP address on the Server 1 node.  Once the script is done running, the server is now set up and we can generate traffic!  You can check this by typing &lt;code&gt;w3m http://localhost/cgi-bin/ip.cgi&lt;/code&gt; which should display your IP address.
[[Image(apache2setup.png)]]&lt;/p&gt;

&lt;p&gt;It should look like this. Repeat this process on Server 2&lt;/p&gt;

&lt;h2 id=&#34;setting-up-the-proxy-node:49601fcc70443e8a9f263221deee393b&#34;&gt;Setting up the proxy node&lt;/h2&gt;

&lt;p&gt;Log onto the proxy node and use [attachment:runme.proxy this script] with the &lt;code&gt;sudo&lt;/code&gt; command
if you used the SSH Secure File Transfer then the script will most likely be in /users/UserName/ but we still need to make the file executable&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chmod 755 /users/UserName/runme.proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can run the script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /users/UserName/runme.proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the code the script contains:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#! /bin/sh

apt-get update

apt-get install tinyproxy

apt-get update

echo &amp;quot;Filter \&amp;quot;/etc/tinyproxy/filter\&amp;quot;\nFilterURLs On\nAllow 10.0.0.0/8&amp;quot; &amp;gt;&amp;gt; /etc/tinyproxy.conf

cp /usr/share/tinyproxy/default.html /usr/share/tinyproxy/default.html.ORIGINAL

/etc/init.d/tinyproxy reset
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will run a script which installs and sets up &lt;a href=&#34;https://banu.com/tinyproxy/&#34;&gt;tinyproxy&lt;/a&gt; on the node. Tinyproxy is a free program and is designed to be small and easy to operate. The proxy is now set up!  We&amp;rsquo;ll get to using it in a little while.&lt;/p&gt;

&lt;h1 id=&#34;step-3-generating-and-listening-to-network-traffic:49601fcc70443e8a9f263221deee393b&#34;&gt;Step 3 Generating and Listening to Network Traffic&lt;/h1&gt;

&lt;p&gt;We are now ready to begin learning! [[BR]]
The topics to be covered are
* Understanding what happens when one makes a web server request
* Capturing web traffic using tcpdump
* Analyzing that traffic using wireshark
One person needs to connect to either Alice while another person logs into the server1 node (or server2 if you choose).   From the server node type the command &lt;code&gt;ifconfig&lt;/code&gt; This will show the ethernet links that the node is using.&lt;/p&gt;

&lt;p&gt;[[Image(ifconfig.3.png)]]&lt;/p&gt;

&lt;p&gt;Find the one that shows an inet address of 10.x.x.x In the example above it is eth0. Yours may be different, but that is still ok.&lt;/p&gt;

&lt;h2 id=&#34;direct-client-to-server-traffic:49601fcc70443e8a9f263221deee393b&#34;&gt;Direct Client-to-Server Traffic&lt;/h2&gt;

&lt;p&gt;Then type the command &lt;code&gt;sudo tcpdump -i eth0 -s 0 -x -w /tmp/direct.pcap&lt;/code&gt; This will begin listening to the traffic that comes through this node and that specific ethernet link, eth0 in the example, write the data out to the file direct.pcap in the tmp diretory.  For more help with &lt;code&gt;tcpdump&lt;/code&gt; type in the command &lt;code&gt;man tcpdump&lt;/code&gt;  At this time, the person connected to Alice will enter the command &lt;code&gt;wget --no-proxy http://server1/cgi-bin/ip.cgi&lt;/code&gt; This saves a local copy of the web page set up on the server, and by doing so generates HTTP traffic to examine. We were able to listen in on this traffic thanks to the &lt;code&gt;tcpdump&lt;/code&gt; command. Then the users connected to Server1 will enter the command &lt;code&gt;cp /tmp/direct.pcap .&lt;/code&gt; This will copy the file with the sniffed data into the users directory. We&amp;rsquo;ll analyze what this data looks like and can tell us at a later time. However if you want to analyze this data now before we sniff more, proceed to Step 4 on this page.
[[BR]]To reiterate, the commands are:
* &lt;code&gt;sudo tcpdump -i eth0 -s 0 -x -w /tmp/direct.pcap&lt;/code&gt; from the server
* &lt;code&gt;wget --no-proxy http://server1/cgi-bin/ip.cgi&lt;/code&gt; from Alice
* &lt;code&gt;cp /tmp/direct.pcap .&lt;/code&gt; from the server after closing the tcpdump&lt;/p&gt;

&lt;h2 id=&#34;client-to-server-traffic-through-a-proxy:49601fcc70443e8a9f263221deee393b&#34;&gt;Client-to-Server Traffic through a Proxy&lt;/h2&gt;

&lt;p&gt;Now we&amp;rsquo;ll use a proxy to make this traffic a bit more anonymous.  A proxy will mask the source and destination of the traffic from both the client and the server by working as a go between for the two nodes.  Repeat the &lt;code&gt;tcpdump&lt;/code&gt; command &lt;code&gt;sudo tcpdump -i eth0 -s 0 -x -w /tmp/throughproxy.pcap&lt;/code&gt; However, now the user connected to Alice should enter the command &lt;code&gt;env http_proxy=http://proxy:8888 wget http://server1/cgi-bin/ip.cgi&lt;/code&gt; This command changes an environmental setting and sends the &lt;code&gt;wget&lt;/code&gt; command through the proxy on port 8888.  Thanks to the &lt;code&gt;tcpdump&lt;/code&gt; command, we have a copy of this traffic as well. Then the user on the Server1 node should enter &lt;code&gt;cp /tmp/throughproxy.pcap .&lt;/code&gt; This saves us a copy of the data.
[[BR]]Again, in order:
* &lt;code&gt;sudo tcpdump -i eth0 -s 0 -x -w /tmp/direct.pcap&lt;/code&gt; from the server
* &lt;code&gt;env http_proxy=http://proxy:8888 wget http://server1/cgi-bin/ip.cgi&lt;/code&gt; from Alice
* &lt;code&gt;cp /tmp/direct.pcap .&lt;/code&gt; from the server after closing the tcpdump&lt;/p&gt;

&lt;h2 id=&#34;client-to-server-traffic-through-tor:49601fcc70443e8a9f263221deee393b&#34;&gt;Client-to-Server Traffic through Tor&lt;/h2&gt;

&lt;p&gt;We will now use &lt;a href=&#34;https://www.torproject.org/&#34;&gt;Tor&lt;/a&gt; to
onion route the data. As the name suggests onion routing alters the data flow through a minimum of 3 relays, each adding another layer of anonymity, because the packets of data only know the address of the next relay and the previous relay. Repeat the &lt;code&gt;tcpdump&lt;/code&gt; command &lt;code&gt;sudo tcpdump -i eth0 -s 0 -x -w /tmp/throughtor.pcap&lt;/code&gt;  Now, the user on Alice should use the command &lt;code&gt;torify wget http://server/cgi-bin/ip.cgi&lt;/code&gt; And then &lt;code&gt;cp /tmp/throughtor.pcap .&lt;/code&gt; from the server node.
[[BR]]In order:
* &lt;code&gt;sudo tcpdump -i eth0 -s 0 -x -w /tmp/direct.pcap&lt;/code&gt; from the server
* &lt;code&gt;torify wget http://server1/cgi-bin/ip.cgi&lt;/code&gt; from Alice
* &lt;code&gt;cp /tmp/direct.pcap .&lt;/code&gt; from the server after closing the tcpdump&lt;/p&gt;

&lt;h1 id=&#34;step-4-analyzing-the-traffic-data:49601fcc70443e8a9f263221deee393b&#34;&gt;Step 4 Analyzing the Traffic Data&lt;/h1&gt;

&lt;p&gt;So now we have collected HTTP network traffic data from 3 different connections: direct, through a proxy, and through the Tor network.  Now, it&amp;rsquo;s time to analyze that data.  We will do this using &lt;a href=&#34;http://www.wireshark.org/&#34;&gt;Wireshark&lt;/a&gt;.  Wireshark is a network packet analyzer, it takes captured packets (or captures its own) and then analyzes and displays the data in the packets.  Displaying the information allows the Wireshark user to ensure that no harmful communication is being used against the system or to even spy on a system.  To access this data we need to use the SSH Secure File Transfer Client&lt;/p&gt;

&lt;p&gt;[[Image(sshclientstart.png)]]&lt;/p&gt;

&lt;p&gt;Click on the Quick Connect Button&lt;/p&gt;

&lt;p&gt;[[Image(sshclientlogon.png)]]&lt;/p&gt;

&lt;p&gt;It should look like this. Click Connect, and enter your password when prompted.  In the right column, you should see three files: direct.pcap, throughproxy.pcap, and throughtor.pcap. Copy these files and place them on your desktop.  Then open up Wireshark.&lt;/p&gt;

&lt;p&gt;[[Image(wireshark.png)]]&lt;/p&gt;

&lt;p&gt;Click on the File tab, and click Open. Find the 3 data files on your desktop and open up direct.pcap.&lt;/p&gt;

&lt;p&gt;[[Image(wiresharkdirect.png)]]&lt;/p&gt;

&lt;p&gt;It should look similar to this.  When you look at lines 1 and 2, you will see that this is the ARP request coming from Router2 looking for Server1.  The ARP request is a request for the ethernet address of a node, using the IP address. After that, you will see that lines 3 and 4 are the the TCP requests from Alice to the Server1.  After that in line 6 we see the HTTP request, this is requesting the actual page from the Apache2 server. Let&amp;rsquo;s check out the source and destination information from the HTTP data packets.  We can see that the in the source column and down to line 6 that the source of the HTTP request is 10.1.4.2, which corresponds to the Alice node IP address, and the destination in the destination column is 10.1.1.2, which corresponds to the Server1 node&amp;rsquo;s IP address. This makes it clear that Alice was making an HTTP request to Server1.&lt;/p&gt;

&lt;p&gt;[[Image(Regular Dataflow.png)]]&lt;/p&gt;

&lt;p&gt;Now open up throughproxy.pcap in Wireshark.&lt;/p&gt;

&lt;p&gt;[[Image(wiresharkthroughproxy.png)]]&lt;/p&gt;

&lt;p&gt;What we see is much different, we see that the source is 10.1.3.4, which is the IP address of the proxy node.  So, now the destination, Server1, doesn&amp;rsquo;t know that the request came from Alice, but instead thinks that the request came from the proxy node.&lt;/p&gt;

&lt;p&gt;[[Image(Proxy Dataflow.png)]]&lt;/p&gt;

&lt;p&gt;Now, we try it with the throughtor.pcap file.&lt;/p&gt;

&lt;p&gt;[[Image(wiresharkthroughtor.png)]]&lt;/p&gt;

&lt;p&gt;Again we see that the source is not Alice, but instead matches the IP address from one of the Tor Relay nodes.  It won&amp;rsquo;t always be the same every time because the path that the data takes through the Tor network is random.  This, like going through the proxy, provides anonymity for the client, in our case Alice, but this provides more anonymity because the data goes through 3 Tor relays instead of just one proxy.&lt;/p&gt;

&lt;p&gt;[[Image(Tor Dataflow.png)]]&lt;/p&gt;

&lt;p&gt;This may provide for anonymous communication, but it doesn&amp;rsquo;t keep the data secure.  We might not know who the data came from, but we can still tell what it was. Open up one of the .pcap files.&lt;/p&gt;

&lt;p&gt;[[Image(readwireshark.png)]]&lt;/p&gt;

&lt;p&gt;Highlight one of the HTTP packets, then expand the Hypertext Transfer Protocol section. Here we can read that the command &lt;code&gt;wget&lt;/code&gt; and the user was trying to access &lt;code&gt;http://server1/cgi-bin/ip.cgi&lt;/code&gt; So, even though the server doesn&amp;rsquo;t know where the request came from, we still know what the command is.&lt;/p&gt;

&lt;h1 id=&#34;more-on-your-own:49601fcc70443e8a9f263221deee393b&#34;&gt;More on Your Own&lt;/h1&gt;

&lt;p&gt;If you want to explore this some more, you can use &lt;code&gt;tcpdump&lt;/code&gt; and Wireshark on more than just the server node. When using the proxy to send data, you can use it on the Alice node and the proxy node to determine what each knows about the source and destination of the packets. If you&amp;rsquo;re using Tor, then you can use it on the Alice node and the Tor Relays to determine what they all know about the packets. After you&amp;rsquo;ve done some of that, which anonymity tool do you think is the best at keeping users anonymous?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://deter-project.github.io/BatchStats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://deter-project.github.io/BatchStats/</guid>
      <description>&lt;p&gt;All these stats ignore class projects which are currently banned from creating batch experiments.&lt;/p&gt;

&lt;p&gt;Recent activity:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt;
select year(last_activity) as yr, month(last_activity) as mo,
       p.pid, eid
  from experiment_stats s, projects p
 where s.pid_idx = p.pid_idx and
       !p.class and batch and year(last_activity) &amp;gt;= 2009
 order by yr, mo, p.pid, eid;
+------+------+--------------+---------------+
| yr   | mo   | pid          | eid           |
+------+------+--------------+---------------+
| 2009 |    4 | T1T2         | jdemo         | 
| 2009 |    5 | SecureIED    | 32hostsmcast  | 
| 2010 |    1 | liveobjects2 | myexp1        | 
| 2010 |    3 | DeterTest    | jjh-batch     | 
| 2010 |    3 | DeterTest    | jjh-batchtest | 
| 2010 |    3 | liveobjects2 | myexp         | 
| 2010 |    3 | Panorama     | bitfuzz10-1   | 
| 2010 |    8 | SOS          | appcomm       | 
+------+------+--------------+---------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All batch, by project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; 
select p.pid, count(*)
  from experiment_stats e, projects p
 where e.pid_idx = p.pid_idx and
       !p.class and e.batch
 group by pid order by count(*) desc;
+--------------+----------+
| pid          | count(*) |
+--------------+----------+
| ddos         |     2412 | 
| Fidran       |      134 | 
| FloodWatch   |       48 | 
| MONA         |       29 | 
| worm         |       12 | 
| emulab-ops   |       12 | 
| NSUDDOS      |       11 | 
| DeterTest    |       10 | 
| psuworm      |        8 | 
| SOS          |        6 | 
| rsgc         |        4 | 
| DIAMOND      |        3 | 
| Deter        |        2 | 
| liveobjects2 |        2 | 
| SWOON        |        2 | 
| vinci        |        1 | 
| T1T2         |        1 | 
| SecureIED    |        1 | 
| DDoSImpact   |        1 | 
| Panorama     |        1 | 
| eWorm        |        1 | 
+--------------+----------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All activity, ever:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt;
select year(last_activity) as yr, month(last_activity) as mo,
       count(*)
  from experiment_stats s, projects p
 where s.pid_idx = p.pid_idx and
       !p.class and batch
 group by yr, mo
 order by yr, mo;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: y axis is log scale
[[Image(graph.png)]]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://deter-project.github.io/CachePoisonExample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://deter-project.github.io/CachePoisonExample/</guid>
      <description>

&lt;p&gt;The attacker poisons a DNS cache to take over authority for a given domain. The attacker then creates a phishing page and tries to steal user&amp;rsquo;s usernames/passwords. There are two classes of experiments that need to be combined:
    a. an experiment where a DNS cache is poisoned, subclass of cache poisoning experiments
    b. an experiment where a phishing attack is conducted via a Web page to steal usernames/passwords&lt;/p&gt;

&lt;h1 id=&#34;example-2-dns-cache-poisoning-for-phishing:0010c1ad8cf7f7fc6dffa9efcc792eb5&#34;&gt;Example 2: DNS cache poisoning for phishing&lt;/h1&gt;

&lt;p&gt;This example used two metadescriptions. Let&amp;rsquo;s go through each of them. This example is written in [CurrentlyProposedLanguage].&lt;/p&gt;

&lt;h2 id=&#34;cache-poisoning-metadescription:0010c1ad8cf7f7fc6dffa9efcc792eb5&#34;&gt;Cache poisoning metadescription&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;define cachePoisoning:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Logical topology:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*Objects:*

  Attacker extends Node

  Name, fakeResource extends String

  Cache extends Object

  Cache := {String[] records}

*Cardinality:*

  |Attacker|,,1,,

  |Name|,,1,,

  |fakeResource|,,1,,

  |Cache|,,1,,

*Relationships:*

  not collocated(Cache, Attacker)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;*Timeline of events: *&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Definitions:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Attacker a, Cache c, Name n, fakeResource fr

e1 :REPLY, origin c, content = (n=fr)}

s1 := {c.records += (n=fr)} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Timeline:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;e1 -&amp;gt; s1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Invariants:&lt;/em&gt;    Nothing in addition to the topology and timeline above.&lt;/p&gt;

&lt;h2 id=&#34;dns-cache-poisoning-metadescription:0010c1ad8cf7f7fc6dffa9efcc792eb5&#34;&gt;DNS Cache poisoning metadescription&lt;/h2&gt;

&lt;p&gt;This is a special case of cache poisoning where the target is DNS cache.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;define DNSCachePoisoning: import cachePoisoning cp&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Logical topology:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Objects:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Auth extends Node

(Name extends DNSName, Name := cp.Name, fakeIP extends IPAddress, FakeIP := cp.fakeResource) xor

(Name extends DNSName, domain(Name) := cp.Name, fakeAuth extends DNSName,  fakeAuth := cp.fakeResource)

RealIP extends IPAddress

victimCache extends Object, victimCache := cp.Cache

victimCache := {DNSRecord[] records}

authCache extends Object

authCache :{Name=RealIP, auth(domain(Name)) = Auth}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Cardinality:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|Auth|,,1,,

|RealIP|,,1,,

|authCache|,,1,,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Relationships:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;not collocated(victimCache, Auth)

collocated(authCache, Auth)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;*Timeline of events: *&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Definitions:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DNSREQUEST extends REQUEST

DNSREPLY extends REPLY

Attacker att, Auth auth, Name n, FakeIP fIP, fakeAuth fauth, RealIP rIP, victimCache vc, authCache ac

  e1 :DNSREQUEST, origin vc, content = IP(n)?}

  e2 :DNSREQUEST, origin auth, content = IP(n)?}

  e3 :DNSREPLY, origin vc, content = {n=rIP}}

  e4 :DNSREPLY, origin vc, content = {n=unknown}}

  e5 :DNSREPLY, origin vc, content fakeAuth}}

  s1 :fakeAuth)}

  e6 :DNSREPLY, origin vc, content = {n=fIP}}

  s2 :=  cp.s1, s1 := {vc.records += (n=fIP)}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Timeline:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  e1 -&amp;gt; e2 -&amp;gt; (e5 | matches(e5,e2) -&amp;gt; s1 -&amp;gt; e4 xor e6 | matches(e6, e2) -&amp;gt; s2 -&amp;gt; e3) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Invariants:&lt;/em&gt;    Nothing in addition to the topology and timeline above.&lt;/p&gt;

&lt;h2 id=&#34;confidential-access-metadescription:0010c1ad8cf7f7fc6dffa9efcc792eb5&#34;&gt;Confidential access metadescription&lt;/h2&gt;

&lt;p&gt;The phishing attempt is essentially same as presenting a valid page to the user that asks for confidential info - it&amp;rsquo;s just that the location of that page is not as user expected.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;define confidentialAccess:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Logical topology:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Objects:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  User extends Human

  Server extends webServer

  Page extends webPage

  Public, Confidential extends String
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Cardinality:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|User|,,1,,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;   |Server|,,1,,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|Page|,,&amp;gt;=1,,

|Public|,,1,,

|Confidential|,,1,,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Relationships:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;   collocated(Page, Server)&lt;/p&gt;

&lt;p&gt;*Timeline of events: *&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Definitions:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;User u, Server s, Public p, Confidential c, Page wp

  e1 :WEBREQUEST, origin s, content = url(wp)}

  e2 :WEBREQUEST, origin u, content = (public?, confidential?)}

  e3 :WEBREPLY, origin s, content = (public=x, confidential=y)}

  e4 :WEBREPLY, origin u, content = wp}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Timeline:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  e1 -&amp;gt; e2 -&amp;gt; e3 -&amp;gt; if (x # p and y c) then e4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Invariants:&lt;/em&gt;    Nothing in addition to the topology and timeline above.&lt;/p&gt;

&lt;h2 id=&#34;experiment-design:0010c1ad8cf7f7fc6dffa9efcc792eb5&#34;&gt;Experiment design&lt;/h2&gt;

&lt;p&gt;Now I&amp;rsquo;m a user who wants to design an experiment. I need to combine two metadescriptions (DNS cache poisoning and phishing) and somehow tie them down to generator choices. To combine I&amp;rsquo;ll do something like this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;lsquo;define Phishing: import DNSCachePoisoning dcp, confidentialAccess ca&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Logical topology:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Objects:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dcp.FakeIP := ip(ca.Server)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Cardinality:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Relationships:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;*Timeline of events: *&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Definitions:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Timeline:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  timeline(dcp) -&amp;gt; timeline(ca)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Invariants:&lt;/em&gt;    Nothing in addition to the topology and timeline above.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://deter-project.github.io/BotnetExample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://deter-project.github.io/BotnetExample/</guid>
      <description>

&lt;p&gt;A worm infects some vulnerable hosts, they organize into a P2P botnet with some botmaster and start exchanging C&amp;amp;C traffic. Experimenter wants to observe the evolution of the botnet and the amount of traffic that master receives. There are two classes of experiments here that need to be combined together:
    a. an experiment where worm spreads and infects vulnerable hosts
    b. an experiment where some hosts organize into P2P network and somehow elect a leader who then sends commands to them and they may send reports back&lt;/p&gt;

&lt;h1 id=&#34;example-1-botnet:047fbe5fdb045045c26808c44256919d&#34;&gt;Example 1: Botnet&lt;/h1&gt;

&lt;p&gt;This example used two metadescriptions. Let&amp;rsquo;s go through each of them. This example is written in [CurrentlyProposedLanguage].&lt;/p&gt;

&lt;h2 id=&#34;worm-spread-metadescription:047fbe5fdb045045c26808c44256919d&#34;&gt;Worm spread metadescription&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;define Worm:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Logical topology:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Objects:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VNode extends Node

VNode :Vulnerable, Vulnerability vulnerability = x}

INode :Infected}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Cardinality:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|INode|,,&amp;gt;=1,,

|VNode|,,&amp;gt;=1,,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Relationships:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;*Timeline of events: *&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Definitions:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; each Inode i, some VNode v:

   e1 :SCAN, origin v, vulnerability = x }

   s1 :Infected}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Timeline:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   e1 -&amp;gt; if (e1.vulnerability == v.vulnerability) then s1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Invariants:&lt;/em&gt; No additional ones are needed here.&lt;/p&gt;

&lt;h2 id=&#34;p2p-w-leader-and-c-c-traffic-metadescription:047fbe5fdb045045c26808c44256919d&#34;&gt;P2P w leader and C&amp;amp;C traffic metadescription&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;define P2P:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Logical topology:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Objects:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Peer extends Node

Peer :{}, Leader leader = none }

Leader extends Peer

Leader :{}  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Cardinality:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|Peer|,,&amp;gt;=2,,

|Leader|,,&amp;gt;=1,,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Relationships:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;*Timeline of events: *&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Definitions:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PEERREQUEST extends REQUEST

PEERREPLY extends REPLY

each Peer peer1, some Peer peer2: 

  e1 :PEERREQUEST, origin peer2}

  e2 :PEERREPLY, origin peer1}

  s1 := {peer2.peers += peer1}

  s2 := {peer2.peers += peer1}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;each Peer x:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  e3 :LEADERIS, origin x, Leader yourleader = leader}

  s3 :leader}

  e4 :HELLO, origin x.leader} 

  e5 :CMD, origin x, String cmd = c} 

  e6 :REPORT, origin x, String report = r} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Timeline:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  e1 -&amp;gt; [s1 and (e2 | matches(e2,e1)) -&amp;gt; s2] | | e3 -&amp;gt; s3 -&amp;gt; e4 -&amp;gt; e5 -&amp;gt; [e6]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Invariants:&lt;/em&gt; No additional ones are needed here.&lt;/p&gt;

&lt;h2 id=&#34;experiment-design:047fbe5fdb045045c26808c44256919d&#34;&gt;Experiment design&lt;/h2&gt;

&lt;p&gt;Now I&amp;rsquo;m a user who wants to design my experiment. I need to combine two metadescriptions and somehow tie them down to generator choices. To combine I need to specify how outputs of worm metadescription match inputs of P2P metadescription. I&amp;rsquo;ll do something like this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;define Botnet: import Worm w, P2P p2p&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Logical topology:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Objects:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;each p2p.Peer p and each w.Infected i

    p := i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Cardinality:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Relationships:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;*Timeline of events: *&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Definitions:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Timeline:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; timeline(w) | | timeline(p2p)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Invariants:&lt;/em&gt; No additional ones are needed here.&lt;/p&gt;

&lt;p&gt;i.e. each infected host becomes a peer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://deter-project.github.io/CamelCase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://deter-project.github.io/CamelCase/</guid>
      <description>

&lt;p&gt;New words created by smashing together capitalized words.&lt;/p&gt;

&lt;p&gt;CamelCase is the original wiki convention for creating hyperlinks, with the additional requirement that the capitals are followed by a lower-case letter; hence “AlabamA” and “ABc” will not be links.&lt;/p&gt;

&lt;h1 id=&#34;customizing-the-wiki-behavior:ee0c7f1adff97de93e273b2a6365e778&#34;&gt;Customizing the Wiki behavior&lt;/h1&gt;

&lt;p&gt;Some people dislike linking by CamelCase.  While Trac remains faithful to the original Wiki style, it provides a number of ways to accomodate users with different preferences:
* There&amp;rsquo;s an option (&lt;code&gt;ignore_missing_pages&lt;/code&gt; in the [wiki:TracIni#wiki-section &amp;ldquo;[wiki]&amp;ldquo;] section of TracIni) to simply ignore links to missing pages when the link is written using the CamelCase style, instead of that word being replaced by a gray link followed by a question mark.[[BR]]
   That can be useful when CamelCase style is used to name code artifacts like class names and there&amp;rsquo;s no corresponding page for them.
* There&amp;rsquo;s an option (&lt;code&gt;split_page_names&lt;/code&gt; in the  [wiki:TracIni#wiki-section &amp;ldquo;[wiki]&amp;ldquo;] section of TracIni) to automatically insert space characters between the words of a CamelCase link when rendering the link.
* Creation of explicit Wiki links is also easy, see WikiPageNames for details.
* In addition, Wiki formatting can be disabled completely in some places (e.g. when rendering commit log messages). See &lt;code&gt;wiki_format_messages&lt;/code&gt; in the [wiki:TracIni#changeset-section &amp;ldquo;[changeset]&amp;ldquo;] section of TracIni.&lt;/p&gt;

&lt;p&gt;See TracIni for more information on the available options.&lt;/p&gt;

&lt;h1 id=&#34;more-information-on-camelcase:ee0c7f1adff97de93e273b2a6365e778&#34;&gt;More information on CamelCase&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://c2.com/cgi/wiki?WikiCase&#34;&gt;http://c2.com/cgi/wiki?WikiCase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/CamelCase&#34;&gt;http://en.wikipedia.org/wiki/CamelCase&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;See also: WikiPageNames, WikiNewPage, WikiFormatting, TracWiki&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://deter-project.github.io/ClassResourceLimits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://deter-project.github.io/ClassResourceLimits/</guid>
      <description>

&lt;h1 id=&#34;what-are-resource-limits:7bb2e621c260edd8b7b8790aa22b02e6&#34;&gt;What are resource limits?&lt;/h1&gt;

&lt;p&gt;If you are a class user, your class only have access to a limited number of nodes. You can see how many nodes are available for your class on your My DETERlab page.&lt;/p&gt;

&lt;h1 id=&#34;what-error-message-will-i-receive-if-there-are-no-nodes-left-for-my-project:7bb2e621c260edd8b7b8790aa22b02e6&#34;&gt;What error message will I receive if there are no nodes left for my project?&lt;/h1&gt;

&lt;p&gt;Something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Admission Control: $project/$experiment has too many nodes allocated!
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;maximum-node-usage:7bb2e621c260edd8b7b8790aa22b02e6&#34;&gt;Maximum Node Usage&lt;/h1&gt;

&lt;p&gt;Each class is limited to a portion of its max required nodes for the duration of an assignment. This portion should be around &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt;-&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; for large classes and around &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; for small ones. Instructors are asked to set this limit by clicking on the &amp;ldquo;Teaching&amp;rdquo; tab of their &amp;ldquo;My DETERlab&amp;rdquo; page, and then clicking in the &amp;ldquo;Input Schedule&amp;rdquo; box under &amp;ldquo;Class Projects&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Collectively all classes will be limited to &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; of the maximum capacity of the testbed at all times (which is to say: 330 nodes).&lt;/p&gt;

&lt;h1 id=&#34;rationale:7bb2e621c260edd8b7b8790aa22b02e6&#34;&gt;Rationale&lt;/h1&gt;

&lt;p&gt;DETERlab has 500 nodes (physical PCs) split between ISI in Marina del Rey and UC Berkeley. They are our most scarce resource.&lt;/p&gt;

&lt;p&gt;In order to provide fair access to nodes to all users of the testbed (researchers and classes alike), we impose limits on the maximum number of nodes available to classes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://deter-project.github.io/CentOSImage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://deter-project.github.io/CentOSImage/</guid>
      <description>

&lt;h1 id=&#34;centos-images-at-deter:643973f5900f493d6e180cee39c719ed&#34;&gt;CentOS Images at DETER&lt;/h1&gt;

&lt;h2 id=&#34;centos5:643973f5900f493d6e180cee39c719ed&#34;&gt;CentOS5&lt;/h2&gt;

&lt;p&gt;This is currently at CentOS 5.7.  We support CentOS instead of Fedora because of the longer term of support offered for CentOS.  The CentOS 5 image is a whole disk image with linux installed on partition 1.  This is different from the Emulab tradition of putting Linux on partition 2.&lt;/p&gt;

&lt;h2 id=&#34;centos6-64-std:643973f5900f493d6e180cee39c719ed&#34;&gt;CentOS6-64-STD&lt;/h2&gt;

&lt;p&gt;CentOS 6.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://deter-project.github.io/ClassSupport/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://deter-project.github.io/ClassSupport/</guid>
      <description>&lt;p&gt;Classes use DeterLab differently than researchers do. Both groups can use DeterLab&amp;rsquo;s full range of tools and resources, but we limit the amount of accidental sharing students do and assign them accounts that we can reuse. In order to do that we need your help in keeping track of who is using DeterLab for your classes and broadly what resources you will be using. The details are below.&lt;/p&gt;

&lt;p&gt;If you run into a problem when using DeterLab in your classes please let us know. If you come up with a better solution than the ones we described below we&amp;rsquo;d really like to hear about it!&lt;/p&gt;

&lt;p&gt;[wiki:CourseSetup#setup Course Setup] - what we need from you&lt;/p&gt;

&lt;p&gt;[wiki:CourseSetup#wrapup  Course Wrap-Up] - actions to take at the end of your course&lt;/p&gt;

&lt;p&gt;[wiki:CourseSetup#handoff  Course Hand-Off] - how to have a different instructor reuse the same course at your institution&lt;/p&gt;

&lt;p&gt;[wiki:CourseSetup#manage Managing Your Course] - how add/remove students, unfreeze accounts, add assignments, etc.&lt;/p&gt;

&lt;p&gt;[wiki:CourseSetup#ac  Access Control] - changes we made to the testbed to enforce students&amp;rsquo; individual work&lt;/p&gt;

&lt;p&gt;[wiki:CourseSetup#rl  Resource Limits] - fair sharing&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://deter-project.github.io/Classes/CodeChanges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://deter-project.github.io/Classes/CodeChanges/</guid>
      <description>&lt;p&gt;General&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is one course per project.&lt;/li&gt;
&lt;li&gt;The project_head is the primary instructor&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Anybody with group_root permission is assumed to be a TA&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Instructors and TA&amp;rsquo;s are allowed to sudo to any student on the ops node&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instructors may sudo to a TA but not conversely.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code changes&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;The instacct utility (described below) has a function which generates an include file
 for sudo which is copied to the ops node and installed as /usr/local/etc/sudoers.classes.
 The function is run either by explicit request on the command line, or as a side-effect
 when students are assigned to a class, and at the end of the semester when a class is wiped.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Experiment Permissions&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When an experiment is created in the default group, only the
 student&amp;rsquo;s home directory and /proj/&lt;PID&gt;/exp/&lt;EID&gt; are exported to the
 nodes in the experiment.&lt;/p&gt;

&lt;p&gt;If the experiment is created in a subgroup of the main project, normal
 export permissions already isolate students from others (except for those
 in the group). /proj directory exports are applied as above.&lt;/p&gt;

&lt;p&gt;The ssh public keys of the instructor and TA&amp;rsquo;s are put into the
 root .ssh/authorized_keys file so that the instructors can log
 into any node to grade the experiment (as class exercise) or
 debug it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code changes&lt;/strong&gt;: tmcd&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Web Interface&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Instructors and TA&amp;rsquo;s are allowed to Freeze, Thaw and SU-as a student
 and edit a student&amp;rsquo;s profile.  When an instructor &lt;code&gt;removes&lt;/code&gt; a class
 account from the project, instead of actually removing it, it recycles the account.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code changes&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;www/user_defs.php defines new routines InstructedBy() and CourseAcct(),
 referenced in delete_user.php3 moduserinfo.php3 showuser.php3 suuser.php3.
 There are perl versions of these in db/User.pm.in.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Recyclable student accounts&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Student accounts are not created in the normal manner (create
 an account, apply to join an existing project) - instead:&lt;/p&gt;

&lt;p&gt;A stem is chosen for the project, say in the case of the
 project USC558L, sc558, and then a number of accounts are
 generated of the form sc558[a-z][a-z] as many are need
 to accommodate the students in the class.&lt;/p&gt;

&lt;p&gt;The instructor provides a list of email address, and
 one account is assigned per email address.&lt;/p&gt;

&lt;p&gt;At the end of the semester, the student accounts are wiped -
 all experiments headed by the student are terminated, all files
 underneath the students home directory are deleted, the passwords
 changed to something random, all public ssh keys and ssl certs
 recorded in the database are flushed and then randomly regenerated
 as in a new account.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code changes&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;The source for the instacct utility was added to the tree as&lt;/p&gt;

&lt;p&gt;testbed/account/instacct.in, manage_class.in&lt;/p&gt;

&lt;p&gt;The separate perl script manage_class gets installed on the ops node
 to invoke an sslxmlrpc call so that instructors may do almost anything
 that a testbed adminstrator could do.&lt;/p&gt;

&lt;p&gt;The two commands reserved to admins are to set the stem for class names, and to generate
 a number of accounts in advance that are ready to assign - in the same state
 a previously used and wiped account as in.&lt;/p&gt;

&lt;p&gt;Since our funders require us to provide usage goals and metrics, we track
 the number of student accounts which were generated, (re-)assigned and wiped
 by means of a couple of additional tables in the database:&lt;/p&gt;

&lt;p&gt;project_history and project_attributes.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Other peculiarities of student accounts&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Student accounts may not join other projects.&lt;/p&gt;

&lt;p&gt;A student may be taking more than one course and only have
 one (student) email address; we added a couple of warts to deal
 with this -&lt;/p&gt;

&lt;p&gt;There is an ancillary table in the database called email_aliases;
 and when the account is assigned the .forward is set to this&lt;br /&gt;
 and the students email becomes e.g. sc558ab@users.isi.deterlab.net&lt;/p&gt;

&lt;p&gt;So, for all users, students or not, we require web login by uid only
 and not email address.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code changes&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;account/tbacct.in was changed so that when it generates a .forward
 file, the email_aliases entry preempts the usr_email in the users table.&lt;/p&gt;

&lt;p&gt;An unresolved bug is letting an instructor correct a students email, now that
 it is kept in a separate place.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>